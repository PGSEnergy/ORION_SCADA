; This command procedure is used for sending AO process object values
; from a COM application to a NCC (upstream direction)
;
; SYS600 10.2.0
; Compilation status: Compiled
; DO NOT edit this program without consulting with Hitachi Power Grids.
;
; INPUT: @LN, @IX, @RT, @RM, @OS, @CT, @BL, @SB, @OR, from input process object
;         @NCC_STA_NUMBERS , STA numbers of the NCCs, vector
;         @NCC_PROTOCOLS, protocols of the NCCs, vector
;         @NCC_ADDRESSES, addresses of the NCCs, vector
;         @NCC_OPERATION_MODES, operation modes of the NCCs, vector 
;---------------------------------------------------------------------------------------------

#ERROR CONTINUE

;initialize variables
@PREVENT_DATA_SENDING = FALSE
@ENABLE_LOGGING = COM_GENVAR:PBZ(3)
@ENABLE_DATA_SENDING_AFTER_STARTUP = COM_GENVAR:PBZ(4)
@UN = 'LN':PUN'IX'
@INDICATION_BLOCKED = FALSE
@INDICATION_BLOCKED_ENABLED = COM_GENVAR:PBZ(16)
@RZ = 'LN':PRZ'IX'
@PREVENT_STATUS_SENDING = FALSE
@IED_OS = 0
@OK_STATUS_CODES = (0,13258)

;if newer registration found
#IF 'LN':PRT'IX' > %RT OR ('LN':PRT'IX' == %RT AND 'LN':PRM'IX' > %RM) #THEN #BLOCK
   #IF DATA_TYPE(%COM_CAUSE_OF_TRANSMISSION) == "INTEGER" #THEN #BLOCK
      #IF %COM_CAUSE_OF_TRANSMISSION >= 20 #THEN #BLOCK
         @PREVENT_DATA_SENDING = TRUE
         @UPDATE_SIGNAL_TIME = TIMES  
         @NOTIFY = CONSOLE_OUTPUT("'UPDATE_SIGNAL_TIME' The oldest update of signal 'LN':P'IX' is not sent to the NCCs")
      #BLOCK_END ; 2
      #ELSE #BLOCK
         @OS = 'LN':POS'IX'
         #IF %OS < 10 #THEN #BLOCK
            @DB = 'LN':POV'IX'
            @AL = 'LN':PAL'IX'
         #BLOCK_END
         #ELSE #BLOCK
            @DB = 1
            @AL = 1
         #BLOCK_END
         @RT = 'LN':PRT'IX'
         @RM = 'LN':PRM'IX'
         @BL = 'LN':PBL'IX'
         @SB = 'LN':PSB'IX'
         @OR = 'LN':POR'IX'
         @CT = 'LN':PCT'IX'
         @OG = 'LN':POG'IX'
      #BLOCK_END
   #BLOCK_END
#BLOCK_END ; 1
#IF NOT %PREVENT_DATA_SENDING AND %ENABLE_DATA_SENDING_AFTER_STARTUP #THEN #BLOCK ; 1
   #IF %INDICATION_BLOCKED_ENABLED #THEN #BLOCK
      #IF BIT(%RZ,3) == 1 #THEN #BLOCK
         #IF BIT(%RZ,8) == 0 AND DATA_TYPE(%COM_CAUSE_OF_TRANSMISSION) <> "INTEGER" #THEN #BLOCK 
            @INDICATION_BLOCKED = TRUE
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #IF NOT %INDICATION_BLOCKED #THEN #BLOCK
      ;read cross-reference table pointer
      @XREF_INDEX = 'LN':PTI'IX'
      ;if xref found, decode NCC information
      #IF %XREF_INDEX > 0  #THEN #BLOCK  ; 2
         #IF COM_USOXR:CCS == 1 #THEN #DO COM_USOXR:CCP
         #ELSE #DO COM_USOXR:CIN
         ;if NCC connections found, send value to NCCs
         #IF LENGTH(%NCC_STA_NUMBERS) > 0 #THEN #BLOCK ; 3
            #LOOP_WITH NCC_NR = 1..LENGTH(%NCC_STA_NUMBERS) ; 4
               ;cross-reference parameters
               @STA_NR = %NCC_STA_NUMBERS(%NCC_NR)
               @PROTOCOL = %NCC_PROTOCOLS(%NCC_NR)
               @NCC_ADDR = %NCC_ADDRESSES(%NCC_NR)
               @NCC_NUMBER = %NCC_NUMBERS(%NCC_NR)
               ;if  NCC address found, send value according to the NCC protocol
               ;check also that data sending is allowed by parameter set from tool            
               #IF LENGTH(%NCC_ADDR) > 0 AND NOT COM_GENVAR:PBZ(%NCC_NR+4) #THEN #BLOCK ; 5
                  #CASE %PROTOCOL ; 6
                     #WHEN 1 #BLOCK ;********************** RP-570 slave protocol ********************************; 7
                        ;sending status of output objects not supported by this protocol
                     #BLOCK_END ; 7          
                     #WHEN 2 #BLOCK ;********************** IEC 870-5-101 slave protocol *************************; 7
                        ;sending status of output objects not supported by this protocol
                     #BLOCK_END ; 7 
                     #WHEN 3 #BLOCK ;********************** CPI (attribute interface as in RP-570 slave) *********; 7   
                        ;sending status of output objects not supported by this protocol
                     #BLOCK_END ; 7 
                     #WHEN 4 #BLOCK ;********************** DNP 3.0 slave *************************************** ; 7                  
                        ;protocol parameters 
                        @SD_CLASS = 2 ; middle weight (priority)
                        @EV_CLASS = 0 ; default event class
                        ;compose control byte
                        #CASE %NCC_OPERATION_MODES(%NCC_NR)
                           #WHEN 1 @CTRL = 7  ; quiescent mode                     
                           #WHEN 2 @CTRL = 3  ; unsolicited report-by-exception mode
                           #WHEN 3 @CTRL = 1  ; polled report-by-exception mode
                           #WHEN 4 @CTRL = 1  ; polled static mode                        
                        #CASE_END
                        #IF BIT(%OUTPUT_SIGNAL_HANDLINGS(%NCC_NUMBER),4) == 1 #THEN #BLOCK
                           @VALUE = %AO
                        #BLOCK_END
                        #ELSE #BLOCK
                           ;scale value to -32767..32767 using the COM 500 scale object
                           @VALUE = ROUND(SCALE(%AO,"COM_AIU16'NCC_NR'","INPUT"))
                           ;if outside S16 range, limit value and set overflow bit
                           #IF ABS(%VALUE) > 32767 #THEN #BLOCK
                              @VALUE = MIN(MAX(%VALUE,-32767),32767)
                              @OR = 1
                           #BLOCK_END
                        #BLOCK_END  
                        ;compose flag byte
                        @IED_STA_NR = 'LN':PUN'IX'
                        @OS_READ_STATUS = STATUS
                        #ERROR IGNORE 
                           @IED_OS = STA'IED_STA_NR':SOS
                        #ERROR CONTINUE
                        @OS_READ_STATUS = STATUS
                        #IF %OS_READ_STATUS <> 0 OR LENGTH(SELECT(%OK_STATUS_CODES,"==%IED_OS")) == 0 #THEN @OS = 2 
                        #ELSE @OS = 0
                        #IF %OS == 2 #THEN @COMM_LOST = 1
                        #ELSE @COMM_LOST = 0
                        #IF %OS == 1 OR %OS == 10 OR %OS == 2 #THEN @ON_LINE = 0
                        #ELSE @ON_LINE = 1  
                        #IF %INDICATION_BLOCKED_ENABLED #THEN #BLOCK
                           #IF BIT(%RZ,3) == 1 #THEN @ON_LINE = 0
                        #BLOCK_END                   
                        @FLAG = %ON_LINE+0*2+%COMM_LOST*4+0*8+%SB*16+%OR*32+0*64+0*128                      
                        ;group and variation of the object
                        #IF %COMMAND_TYPE == 6 #THEN #BLOCK
                           @GRP_VAR = (10,2) 
                           @LN_OPEN = %OUTPUT_OBJECT_LNS(3)
                           @IX_OPEN = %OUTPUT_OBJECT_IXS(3)                           
                           @LN_CLOSE = %OUTPUT_OBJECT_LNS(4)
                           @IX_CLOSE = %OUTPUT_OBJECT_IXS(4)   
                           #IF 'IX' == %IX_CLOSE #THEN #BLOCK
                              #IF DATA_TYPE(%COM_CAUSE_OF_TRANSMISSION) == "INTEGER" #THEN #BLOCK
                                 #IF %OS < 10 #THEN #BLOCK 
                                    #IF 'LN_CLOSE':PRT'IX_CLOSE' > 'LN_OPEN':PRT'IX_OPEN' OR ('LN_CLOSE':PRT'IX_CLOSE' == 'LN_OPEN':PRT'IX_OPEN' AND -
                                       'LN_CLOSE':PRM'IX_CLOSE' >= 'LN_OPEN':PRM'IX_OPEN') #THEN @VALUE = 1
                                    #ELSE @PREVENT_STATUS_SENDING = TRUE
                                 #BLOCK_END
                              #BLOCK_END
                              #ELSE @VALUE = 1 
                           #BLOCK_END
                           #ELSE_IF 'IX' == %IX_OPEN #THEN #BLOCK
                              #IF DATA_TYPE(%COM_CAUSE_OF_TRANSMISSION) == "INTEGER" #THEN #BLOCK
                                 #IF %OS < 10 #THEN #BLOCK 
                                     #IF 'LN_OPEN':PRT'IX_OPEN' > 'LN_CLOSE':PRT'IX_CLOSE' OR ('LN_OPEN':PRT'IX_OPEN' == 'LN_CLOSE':PRT'IX_CLOSE' AND -
                                       'LN_OPEN':PRM'IX_OPEN' >= 'LN_CLOSE':PRM'IX_CLOSE') #THEN @VALUE = 0
                                    #ELSE @PREVENT_STATUS_SENDING = TRUE
                                 #BLOCK_END
                              #BLOCK_END
                              #ELSE @VALUE = 0 
                           #BLOCK_END
                        #BLOCK_END
                        #ELSE #BLOCK
                           #IF BIT(%OUTPUT_SIGNAL_HANDLINGS(%NCC_NUMBER),4) == 1 #THEN #BLOCK
                              @GRP_VAR = (40,3) ; Analog output status single precision float
                           #BLOCK_END
                           #ELSE #BLOCK
                              @GRP_VAR = (40,2) ;Analog output status
                           #BLOCK_END
                        #BLOCK_END          
                        #IF NOT %PREVENT_STATUS_SENDING #THEN #BLOCK
                           ;send value to NET                     
                           #SET STA'STA_NR':SSD(%SD_CLASS) = (%GRP_VAR(1),%GRP_VAR(2),%NCC_ADDR,%VALUE,%FLAG,%CTRL)    
                           #IF %ENABLE_LOGGING #THEN #BLOCK ; 8
                              @OBJ=%GRP_VAR(1)
                              @VAR=%GRP_VAR(2)
                              @S=STATUS
                              #IF %EV_CLASS == 0 #THEN @DATA_CLASS = %SD_CLASS
                              #ELSE @DATA_CLASS = %EV_CLASS 
                              @INFO="'rt':'rm',USAO,'UN','LN':P'IX','STA_NR',,'AO',DNP30,0,'NCC_ADDR','VALUE',,,,'OBJ','VAR','FLAG','CTRL','S','OS','DATA_CLASS',"
                              #IF COM_LOG:CCS == 1 #THEN #DO COM_LOG:CCP
                              #ELSE #DO COM_LOG:CIN
                           #BLOCK_END ; 8
                        #BLOCK_END                     
                     #BLOCK_END ; 7                               
                  #CASE_END ; 6
               #BLOCK_END ; 5
               #ELSE_IF %ENABLE_LOGGING #THEN #BLOCK ; 5
                  #IF %NCC_ADDRESSES(%NCC_NR) <> -1 #THEN @NCC_ADDR_FOUND = TRUE
                  #ELSE @NCC_ADDR_FOUND = FALSE
                  @DISABLE_NCC_DATA=COM_GENVAR:PBZ(%NCC_NR+4)
                  @INFO="'rt':'rm',USAO,'UN','LN':P'IX','STA_NR',ncc addr found:'NCC_ADDR_FOUND',disable ncc data sending:'DISABLE_NCC_DATA',,,"
                  #IF COM_LOG:CCS == 1 #THEN #DO COM_LOG:CCP
                  #ELSE #DO COM_LOG:CIN
               #BLOCK_END ; 5                      
            #LOOP_END ; 4
         #BLOCK_END ; 3
         #ELSE_IF %ENABLE_LOGGING #THEN #BLOCK
            @INFO="'rt':'rm',USAO,'UN','LN':P'IX',,ncc connection not found,,,,,,,,,,,,,,,,"
            #IF COM_LOG:CCS == 1 #THEN #DO COM_LOG:CCP
            #ELSE #DO COM_LOG:CIN
         #BLOCK_END
      #BLOCK_END ; 2
      #ELSE_IF %ENABLE_LOGGING #THEN #BLOCK
         @INFO="'rt':'rm',USAO,'UN','LN':P'IX',,cross-reference not found,,,,,,,,,,,,,,,,"
         #IF COM_LOG:CCS == 1 #THEN #DO COM_LOG:CCP
         #ELSE #DO COM_LOG:CIN
      #BLOCK_END  
   #BLOCK_END   
#BLOCK_END ; 1
#ELSE_IF %ENABLE_LOGGING #THEN #BLOCK
   @INFO="'rt':'rm',USAO,'UN','LN':P'IX',,prevent_sending:'PREVENT_DATA_SENDING' enable_sending_after_startup:'ENABLE_DATA_SENDING_AFTER_STARTUP',,,,,,,,,,,,,,,,"
   #IF COM_LOG:CCS == 1 #THEN #DO COM_LOG:CCP
   #ELSE #DO COM_LOG:CIN
#BLOCK_END    

