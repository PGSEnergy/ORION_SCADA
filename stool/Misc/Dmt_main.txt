; The main module
; The globals listed before executing DMT_GLOBALS:C may be (or must be)
; overriden by the command procedure generated by UI part.
; Other globals are not configurable by UI.
; JK/INCRC/17-01-2012:DR-16159, Support the long file naming and replacement of ar.exe with 7za.exe.


#LOCAL Counter
#LOCAL Init_Val

@gt_Log_File = ""
@gt_Fileset_File = ""
@gt_Compression_Utility = ""
@gt_Temp_Dir = PARSE_FILE_NAME("PICT")
@gi_Block_Size = 262144    ; up to 1M
@gb_Disable_Compression = false
@s = DO(DMT_GLOBAL:CIN)

@gt_Description = "@M_DESCRIPTION"
@gt_Version = "1.1"
@gt_Ar_List_File = "'gt_Temp_Dir'\DMT_LIST.TXT"

#on error #block
   @status = status
   @s = DO(DMT_SET:CIN, 2, "")
   @s = DO(DMT_MSG:CIN, -
      "@M_COMMAND_PROCEDURE_ABORTED", -
      "CRITICAL", -
      %status)
#block_end

@s = DO(DMT_SET:CIN, 2, "EP 'gt_Version'")
@s = DO(DMT_MSG:CIN, "@P_STARTING|'gt_Description'|'gt_Version'", "INFORMATION")

; Read the filesets
@gt_Parameter_File = %gt_Fileset_File
@gt_Parameter_Section = "General"
@i_Count = DO(DMT_PARAM:CIN, "Fileset_Count", 0)
#if DATA_TYPE(%i_Count) <> "INTEGER" #then #block
   @s = DO(DMT_MSG:CIN, "@P_INVALID_FILESET_COUNT|'i_Count'", "CRITICAL")
   @i_Count = 0
#block_end

#if %gb_Disable_Compression #then -
   @v_Actions = ("DELETE", "MOVE")
#else -
   @v_Actions = ("COMPRESS", "DELETE", "MOVE")
#create l_Filesets:v = LIST(In_Use = VECTOR)
#loop_with i = 1..%i_Count
   @gt_Parameter_Section = "Fileset'i'"
   #set l_Filesets:vIn_Use(%i) = true
   #set l_Filesets:vSource_Path(%i) = DO(DMT_PARAM:CIN, "Source_Path", "")
   #set l_Filesets:vFile_Mask(%i) = DO(DMT_PARAM:CIN, "File_Mask", "")
   #set l_Filesets:vAction(%i) = UPPER_CASE(DO(DMT_PARAM:CIN, "Action", ""))
   #set l_Filesets:vCriteria(%i) = UPPER_CASE(DO(DMT_PARAM:CIN, "Criteria", ""))

   #if l_Filesets:vSource_Path(%i) == "" OR -
       PARSE_FILE_NAME(l_Filesets:vSource_Path(%i)) == "" #then #block
      @s = DO(DMT_LOG:CIN, "@P_INVALID_SOURCE_PATH|'i'", "CAUTION")
      #set l_Filesets:vIn_Use(%i) = false
   #block_end
   #if l_Filesets:vFile_Mask(%i) == "" #then #block
      @s = DO(DMT_LOG:CIN, "@P_INVALID_FILE_MASK|'i'", "CAUTION")
      #set l_Filesets:vIn_Use(%i) = false
   #block_end
   #if LENGTH(SELECT(%v_Actions, "== l_Filesets:vAction(%i)")) == 0 #then #block
      @s = DO(DMT_LOG:CIN, "@P_INVALID_ACTION|'i'", "CAUTION")
      #set l_Filesets:vIn_Use(%i) = false
   #block_end
   #if LENGTH(SELECT(("TIME", "SIZE"), "== l_Filesets:vCriteria(%i)")) == 0 #then #block
      @s = DO(DMT_LOG:CIN, "@P_INVALID_CRITERIA|'i'", "CAUTION")
      #set l_Filesets:vIn_Use(%i) = false
   #block_end

   #set l_Filesets:vAction_Value(%i) = DO(DMT_PARAM:CIN, "Action_Value", "")
   #if l_Filesets:vAction(%i) <> "DELETE" #then #block
      #if l_Filesets:vAction_Value(%i) == "" OR -
          PARSE_FILE_NAME(l_Filesets:vAction_Value(%i)) == "" #then #block
         @s = DO(DMT_LOG:CIN, -
            "@P_INVALID_" + UPPER_CASE(l_Filesets:vAction(%i)) + "_DESTINATION|'i'", -
            "CAUTION")
         #set l_Filesets:vIn_Use(%i) = false
      #block_end
   #block_end

   #set l_Filesets:vCriteria_Value(%i) = DO(DMT_PARAM:CIN, "Criteria_Value", 0)
   #set l_Filesets:vCriteria_Unit(%i) = UPPER_CASE(DO(DMT_PARAM:CIN, "Criteria_Unit", ""))
   #if DATA_TYPE(l_Filesets:vCriteria_Value(%i)) <> "INTEGER" #then #block
      @s = DO(DMT_LOG:CIN, "@P_INVALID_CRITERIA_VALUE|'i'", "CAUTION")
      #set l_Filesets:vIn_Use(%i) = false
   #block_end
   #case l_Filesets:vCriteria(%i)
      #when "SIZE" @v_Units = ("K", "M", "G")
      #when "TIME" @v_Units = ("DAY", "MONTH", "YEAR")
      #otherwise @v_Units = VECTOR
   #case_end
   #if LENGTH(SELECT(%v_Units, "== l_Filesets:vCriteria_Unit(%i)")) == 0 #then #block
      @s = DO(DMT_LOG:CIN, "@P_INVALID_CRITERIA_UNIT|'i'", "CAUTION")
      #set l_Filesets:vIn_Use(%i) = false
   #block_end
#loop_end

#if %i_Count == 0 #then -
   @s = DO(DMT_MSG:CIN, "@M_NO_FILESETS_TO_PROCESS", "INFORMATION")

@i_Invalid_Filesets = LENGTH(SELECT(l_Filesets:vIn_Use, "NOT ()"))
#if %i_Invalid_Filesets > 0 #then -
   @s = DO(DMT_MSG:CIN, -
      "@P_FILESETS_CONTAIN_INVALID_VALUES|'i_Invalid_Filesets'", -
      "CAUTION")

#if LENGTH(%gt_Compression_Utility) > 0 AND -
   LENGTH(SELECT(%l_Filesets, "Action == ""COMPRESS""")) > 0 #then #block
   #if FILE_MANAGER("EXISTS", FM_SCIL_FILE(%gt_Compression_Utility)) #then #block
      @gt_Compression_Utility = FM_REPRESENT(FM_SCIL_FILE(%gt_Compression_Utility))
   #block_end
   #else #block
      @s = DO(DMT_MSG:CIN, -
         "@P_UTILITY_DOES_NOT_EXIST|'gt_Compression_Utility'", -
         "CAUTION")
      @gt_Compression_Utility = ""
   #block_end
#block_end

@e_Date = CLOCK
@l_Date = LIST( -
   Year = YEAR(%e_Date), -
   Month = MONTH(%e_Date), -
   Day = DAY(%e_Date))
@e_Date = PACK_TIME(l_Date:vYear, l_Date:vMonth, l_Date:vDay, 0, 0, 0)
#loop_with i = 1..%i_Count
   ; Create the list of distinctive file tags
   @v_Masks = SEPARATE(EDIT(l_Filesets:vFile_Mask(%i),"COLLAPSE"), ";")
   @y_Src_Tag = FM_DIRECTORY(PARSE_FILE_NAME(l_Filesets:vSource_Path(%i)))
   @v_File_Tags = VECTOR
   #loop_with j = 1..LENGTH(%v_Masks)
      #error ignore
      @v_Tags = FILE_MANAGER("LIST", %y_Src_Tag, %v_Masks(%j))
      #error stop
      @i_Status = status
      #if %i_Status == 0 #then -
         @v_File_Tags = APPEND(%v_File_Tags, %v_Tags)
      #else #block
         @s = DO(DMT_MSG:CIN, -
            "@P_FAILED_TO_LIST_FILES|'i' " + FM_REPRESENT(%y_Src_Tag), -
            "CAUTION", -
            %i_Status)
         #loop_exit
      #block_end
   #loop_end
   @v_File_Tags = REMOVE_DUPLICATES(%v_File_Tags)
   ; Remove unsupported files from the list
   @l_Split_Names = FM_SPLIT_NAME(FM_REPRESENT(%v_File_Tags, "UPPER_CASE"))
   @v_Valid_Indexes = VECTOR
   #loop_with j = 1..LENGTH(%v_File_Tags)
      #if LENGTH(SELECT(%gv_Extensions, "== l_Split_Names:vExtension(%j)")) > 0 #then -
         @v_Valid_Indexes(LENGTH(%v_Valid_Indexes) + 1) = %j
   #loop_end
   @v_File_Tags = PICK(%v_File_Tags, %v_Valid_Indexes)
   @v_Valid_Indexes = VECTOR
   #delete l_Split_Names:v
   @s = DO(DMT_LOG:CIN, -
      "@P_FILESET_CONTAINS_N_FILES|'i'|" + DEC(LENGTH(%v_File_Tags), 1), -
      "INFORMATION")
   ; Evaluate the criteria
   @l_Result = LIST(Tag = VECTOR)   ; Only holds tag, size and modification time
   @l_Attributes = FILE_MANAGER( -
      "GET_ATTRIBUTES", FM_COMBINE(%y_Src_Tag, %v_File_Tags))
   #case l_Filesets:vCriteria(%i)
      #when "SIZE" #block
         ; Threshold and Total_Size will be used further, in actions
         @i_Threshold = l_Filesets:vCriteria_Value(%i)
         #case l_Filesets:vCriteria_Unit(%i)
            #when "M" @i_Threshold = %i_Threshold * 1024
            #when "G" @i_Threshold = %i_Threshold * 1048576
         #case_end
         @i_Total_Size = 0       ; Size in K
         @i_Size_Remainder = 0   ; Remainder in B, for proper rounding
         #loop_with j = 1..LENGTH(%v_File_Tags)
            #if l_Attributes:vStatus(%j) == 0 #then #block
               @i_Total_Size = %i_Total_Size + l_Attributes:vSize_KB(%j)
               @i_Size_Remainder = %i_Size_Remainder + l_Attributes:vSize_B(%j)
            #block_end
            #else #block
               @s = DO(DMT_MSG:CIN, -
                  "@P_FAILED_TO_RETRIEVE_ATTRIBUTES|'i'|" + -
                     FM_REPRESENT(%v_File_Tags(%j)), -
                  "CAUTION", -
                  DEC(l_Attributes:vStatus(%j)))
            #block_end
         #loop_end
         ; Round up to 1K
         @i_Total_Size = %i_Total_Size + (%i_Size_Remainder + 1023) DIV 1024
         #if %i_Total_Size > %i_Threshold #then #block
            @v_Valid_Indexes = SELECT(l_Attributes:vStatus, "== 0")
            #modify l_Result:v = LIST( -
               Tag = PICK(%v_File_Tags, %v_Valid_Indexes), -
               Modified_S = PICK(l_Attributes:vModified_S, %v_Valid_Indexes), -
               Size_KB = PICK(l_Attributes:vSize_KB, %v_Valid_Indexes))
            @v_Valid_Indexes = VECTOR
         #block_end
      #block_end
      #when "TIME" #block
         @e_Threshold = TYPE_CAST(0, "TIME")
         #case l_Filesets:vCriteria_Unit(%i)
            #when "DAY" @e_Threshold = %e_Date - -
               l_Filesets:vCriteria_Value(%i) * 24 * 3600
            #when "MONTH" #block
               @i_Months = l_Date:vYear * 12 + l_Date:vMonth - 1
               @i_Months = %i_Months - l_Filesets:vCriteria_Value(%i)
               @e_Threshold = PACK_TIME(%i_Months DIV 12, -
                  %i_Months MOD 12 + 1, l_Date:vDay, 0, 0, 0)
               ; If the invalid date was created, switch to the 1st of next month.
               ; This will preserve "filetime before timestamp" condition.
               #if %e_Threshold == 0 AND l_Date:vDay > 28 #then #block
                  @i_Months = %i_Months + 1
                  @e_Threshold = PACK_TIME(%i_Months DIV 12, -
                     %i_Months MOD 12 + 1, 1, 0, 0, 0)
               #block_end
            #block_end
            #when "YEAR" #block
               @e_Threshold = PACK_TIME( -
                  l_Date:vYear - l_Filesets:vCriteria_Value(%i), -
                  l_Date:vMonth, l_Date:vDay, 0, 0, 0)
               #if %e_Threshold == 0 AND l_Date:vMonth == 2 AND l_Date:vDay > 28 #then -
                  @e_Threshold = PACK_TIME( -
                     l_Date:vYear - l_Filesets:vCriteria_Value(%i), -
                     l_Date:vMonth + 1, 1, 0, 0, 0)
            #block_end
         #case_end
         #loop_with j = 1..LENGTH(%v_File_Tags)
            #if l_Attributes:vStatus(%j) == 0 #then #block
               #if l_Attributes:vModified_S(%j) < %e_Threshold #then #block
                  @i_Index = LENGTH(l_Result:vTag) + 1
                  #set l_Result:vTag(%i_Index) = %v_File_Tags(%j)
                  #set l_Result:vModified_S(%i_Index) = l_Attributes:vModified_S(%j)
                  #set l_Result:vSize_KB(%i_Index) = l_Attributes:vSize_KB(%j)
               #block_end
            #block_end
            #else #block
               @s = DO(DMT_MSG:CIN, -
                  "@P_FAILED_TO_RETRIEVE_ATTRIBUTES|'i'|" + -
                     FM_REPRESENT(%v_File_Tags(%j)), -
                  "CAUTION", -
                  DEC(l_Attributes:vStatus(%j)))
            #block_end
         #loop_end
      #block_end
   #case_end
   #delete l_Attributes:v
   ; Process files that meet the criteria
   #if LENGTH(l_Result:vTag) > 0 #then #block
      @v_Sorted = SORT(l_Result:vModified_S)
      #modify l_Result:v = LIST( -
         Tag = PICK(l_Result:vTag, %v_Sorted), -
         Modified_S = PICK(l_Result:vModified_S, %v_Sorted), -
         Size_KB = PICK(l_Result:vSize_KB, %v_Sorted))
      #if l_Filesets:vCriteria(%i) == "SIZE" #then -
         @i_Remaining_Size = %i_Total_Size
      @l_Summary = LIST( -
         Processed = 0, -     ; compressed, copied, etc.
         Deleted = 0, -       ; deleted after processing
         Failed = 0)          ; failed to process
      ; Action-specific initialization
      #case l_Filesets:vAction(%i)
         #when "MOVE" @y_Dst_Tag = FM_DIRECTORY(l_Filesets:vAction_Value(%i))
         #when "COMPRESS" #if %gt_Compression_Utility <> "" #then #block
            @t_New_Number = "0000"
            @v_Compressed_Tags = VECTOR
            #if FILE_MANAGER("EXISTS", FM_FILE(l_Filesets:vAction_Value(%i))) #then #block
               @v_Compressed_Files = VECTOR
;DR-16159
               @t_Command = "'gt_Compression_Utility' l " + -
                  """"+l_Filesets:vAction_Value(%i)+"""" + " > ""'gt_Ar_List_File'"""
;End of DR-16159
               @l_Status = OPS_CALL(%t_Command)
               #if l_Status:vST <> 0 #then #block
                  @s = DO(DMT_MSG:CIN, -
                     "@P_FAILED_TO_LIST|'i'|" + l_Filesets:vAction_Value(%i), -
                     "CAUTION")
                  @gt_Compression_Utility = ""
               #block_end
               #else #block
                  ; Read the contents of the archive directory
                  @v_Ar_List = READ_TEXT(%gt_Ar_List_File, 1, 10000)
;DR-16159
                  #LOOP_WITH Counter=1..LENGTH(%v_Ar_List)
                  #IF LOCATE(%v_Ar_List(Counter),"   Date      Time")>0 #THEN Init_Val=Counter+2
                     #LOOP_END
                  
                  @v_Ar_List = SUBSTR(%v_Ar_List(Init_Val..LENGTH(%v_Ar_List)-2), 54, 12)
;End of DR-16159
                  @v_Ar_List = UPPER_CASE(EDIT(%v_Ar_List, "TRIM"))
                  ; Create the list of numbers
                  @v_Ar_List = REMOVE_DUPLICATES(SUBSTR(%v_Ar_List, 5, 4))
                  @v_Ar_List = DEC_SCAN(%v_Ar_List)
                  @v_Ar_List = PICK(%v_Ar_List, SELECT(GET_STATUS(%v_Ar_List), "==0"))
                  #if LENGTH(%v_Ar_List) > 0 #then #block
                     ; Find the largest number and increase it by 1
                     @v_Last_Number = HIGH(%v_Ar_List)
                     @t_New_Number = REPLACE(DEC(%v_Last_Number(1) + 1, 4), " ", "0")
                  #block_end
               #block_end
            #block_end
            #if %gt_Compression_Utility <> "" #then #block
               ; Delete any existing temporary files with the same names
               @l_Status = FILE_MANAGER("DELETE", -
                  FM_FILE(("'gt_Temp_Dir'\DMT_'t_New_Number'.BIN", -
                     "'gt_Temp_Dir'\DMT_'t_New_Number'.LOG", -
                     "'gt_Temp_Dir'\DMT_'t_New_Number'.DIR")))
               ; The "DIR" file contents is known right now, so create it
               @i_Status = WRITE_TEXT("'gt_Temp_Dir'\DMT_'t_New_Number'.DIR", -
                  VECTOR(l_Filesets:vSource_Path(%i) + " " + -
                     l_Filesets:vFile_Mask(%i) + " " + -
                     l_Filesets:vCriteria(%i) + " " + -
                     DEC(l_Filesets:vCriteria_Value(%i), 1) + " " + -
                     l_Filesets:vCriteria_Unit(%i) + " " + -
                     DEC(YEAR, 4) + SUBSTR(TIMES, 3, 0)))
               #if %i_Status <> 0 #then #block
                  @s = DO(DMT_MSG:CIN, -
                     "@P_FAILED_TO_WRITE_FS_INFO|'i'|" + -
                        l_Filesets:vAction_Value(%i), -
                     "CAUTION", -
                     %i_Status)
                  @gt_Compression_Utility = ""
               #block_end
            #block_end
         #block_end
      #case_end
      @b_Stop = false
      @b_Fatal = false
      @j = 1
      #loop NOT %b_Stop AND NOT %b_Fatal AND %j <= LENGTH(l_Result:vTag)
         @b_Success = false
         #case l_Filesets:vAction(%i)
            #when "COMPRESS" #if %gt_Compression_Utility <> "" #then #block
               @i_Position = 1
               @y_Data = TYPE_CAST("", "BYTE_STRING")
               #error ignore
               @y_Data = READ_BYTES( -
                  FM_COMBINE(%y_Src_Tag, l_Result:vTag(%j)), 1, %gi_Block_Size)
               #error stop
               @i_Status = status
               #loop LENGTH(%y_Data) > 0 AND %i_Status == 0
                  @i_Write_Status = WRITE_BYTES( -
                     "'gt_Temp_Dir'\DMT_'t_New_Number'.BIN", %y_Data, 1)
                  #if %i_Write_Status <> 0 #then #block
                     @s = DO(DMT_MSG:CIN, -
                        "@P_FAILED_TO_WRITE|'i'|PICT/DMT_'t_New_Number'.BIN", -
                        "CAUTION", -
                        %i_Write_Status)
                     @b_Fatal = true
                     #loop_exit
                     #set l_Summary:vFailed = l_Summary:vFailed + 1
                  #block_end
                  @i_Position = %i_Position + LENGTH(%y_Data)
                  #error ignore
                  @y_Data = READ_BYTES( -
                     FM_COMBINE(%y_Src_Tag, l_Result:vTag(%j)), -
                     %i_Position, %gi_Block_Size)
                  #error stop
                  @i_Status = status
               #loop_end
               #if %i_Status <> 0 #then #block
                  @s = DO(DMT_MSG:CIN, -
                     "@P_FAILED_TO_READ|'i'|" + FM_REPRESENT(l_Result:vTag(%j)), -
                     "CAUTION", -
                     %i_Status)
                  #set l_Summary:vFailed = l_Summary:vFailed + 1
               #block_end
               #else #block
                  @i_Position = %i_Position - 1    ; Now it's the size
                  @i_Write_Status = WRITE_TEXT("'gt_Temp_Dir'\DMT_'t_New_Number'.LOG", -
                     VECTOR(FM_REPRESENT(l_Result:vTag(%j)) + ",'i_Position'"), 1)
                  #if %i_Write_Status <> 0 #then #block
                     @s = DO(DMT_MSG:CIN, -
                        "@P_FAILED_TO_WRITE|'i'|PICT/DMT_'t_New_Number'.LOG", -
                        "CAUTION", -
                        %i_Write_Status)
                     @b_Fatal = true
                     #set l_Summary:vFailed = l_Summary:vFailed + 1
                  #block_end
                  #else #block
                     #set l_Summary:vProcessed = l_Summary:vProcessed + 1
                     @v_Compressed_Tags = APPEND(%v_Compressed_Tags, l_Result:vTag(%j))
                  #block_end
               #block_end
            #block_end
            #when "DELETE" #block
               @l_Status = FILE_MANAGER("DELETE", -
                  FM_COMBINE(%y_Src_Tag, l_Result:vTag(%j)))
               #set l_Summary:vDeleted = l_Summary:vDeleted + l_Status:vDeleted
               #set l_Summary:vFailed = l_Summary:vFailed + l_Status:vFailed
               #if l_Status:vStatus == 0 #then -
                  @b_Success = true
               #else -
                  @s = DO(DMT_MSG:CIN, -
                     "@P_FAILED_TO_DELETE|'i'|" + FM_REPRESENT(l_Result:vTag(%j)), -
                     "CAUTION", -
                     l_Status:vStatus)
            #block_end
            #when "MOVE" #block
               #if %j == 1 AND NOT DIRECTORY_MANAGER("EXISTS", %y_Dst_Tag) #then #block
                  @i_Status = DIRECTORY_MANAGER("CREATE", %y_Dst_Tag, "RECURSIVE")
                  #if %i_Status <> 0 #then -
                     @s = DO(DMT_MSG:CIN, -
                        "@P_FAILED_TO_CREATE_DESTINATION_DIRECTORY|'i'|" + -
                           FM_REPRESENT(%y_Dst_Tag), -
                        "CAUTION", -
                        %i_Status)
               #block_end
               #error ignore
               @l_Status = FILE_MANAGER("DELETE", -
                  FM_COMBINE(%y_Dst_Tag, l_Result:vTag(%j)))
               @l_Status = FILE_MANAGER("MOVE", -
                  FM_COMBINE(%y_Src_Tag, l_Result:vTag(%j)), -
                  %y_Dst_Tag)
               #error stop
               @i_Status = status
               #if %i_Status <> 0 #then -
                  @l_Status = LIST(Status = %i_Status)
               #if l_Status:vStatus == 0 #then #block
                  @b_Success = true
                  #set l_Summary:vProcessed = l_Summary:vProcessed + 1
                  #set l_Summary:vDeleted = l_Summary:vDeleted + 1
               #block_end
               #else #block
                  #set l_Summary:vFailed = l_Summary:vFailed + 1
                  @s = DO(DMT_MSG:CIN, -
                     "@P_FAILED_TO_MOVE_TO|'i'|" + FM_REPRESENT(l_Result:vTag(%j)) + -
                        "|" + FM_REPRESENT(%y_Dst_Tag), -
                     "CAUTION", -
                     l_Status:vStatus)
               #block_end
            #block_end
         #case_end
         ; Condition parameters may have been modified, so re-evaluate
         #if %b_Success #then #case l_Filesets:vCriteria(%i)
            #when "SIZE" #block
               @i_Remaining_Size = %i_Remaining_Size - l_Result:vSize_KB(%j)
               #if %i_Remaining_Size <= %i_Threshold #then #block
                  @s = DO(DMT_LOG:CIN, -
                     "@P_TOTAL_SIZE_FALLS_BELOW_THRESHOLD|'i'", -
                     "INFORMATION")
                  ;#loop_exit
                  @b_Stop = true
               #block_end
            #block_end
         #case_end
         @j = %j + 1
      #loop_end
      ; Perform actual compression
      #if l_Filesets:vAction(%i) == "COMPRESS" AND l_Summary:vProcessed > 0 #then #block
         #if %b_Fatal #then #block
            #set l_Summary:vFailed = l_Summary:vFailed + l_Summary:vProcessed
            #set l_Summary:vProcessed = 0
         #block_end
         #else #block
       
;DR-16159         
         @t_Command = "'gt_Compression_Utility' a " + -
               """"+l_Filesets:vAction_Value(%i)+"""" + -
               " ""'gt_Temp_Dir'\DMT_'t_New_Number'.BIN""" + -
               " ""'gt_Temp_Dir'\DMT_'t_New_Number'.LOG""" + -
               " ""'gt_Temp_Dir'\DMT_'t_New_Number'.DIR"""
;End of DR-16159              

            @l_Status = OPS_CALL(%t_Command)
            #if l_Status:vST <> 0 #then #block
               #set l_Summary:vFailed = l_Summary:vFailed + l_Summary:vProcessed
               #set l_Summary:vProcessed = 0
               @s = DO(DMT_MSG:CIN, -
                  "@P_FAILED_TO_COMPRESS|'i'|PICT/DMT_'t_New_Number'.*", -
                  "CAUTION")
            #block_end
            #else_if not FILE_MANAGER("EXISTS", FM_FILE(l_Filesets:vAction_Value(%i))) #then #block
               #set l_Summary:vFailed = l_Summary:vFailed + l_Summary:vProcessed
               #set l_Summary:vProcessed = 0
               @s = DO(DMT_MSG:CIN, -
                  "@P_FAILED_TO_COMPRESS|'i'|PICT/DMT_'t_New_Number'.*", -
                  "CAUTION")
            #block_end
            #else #block
               @s = DO(DMT_LOG:CIN, "@P_ARCHIVE_UPDATED_SUCCESSFULLY|'i'", "INFORMATION")
               #loop_with j = 1..LENGTH(%v_Compressed_Tags)
                  @l_Status = FILE_MANAGER("DELETE", -
                     FM_COMBINE(%y_Src_Tag, %v_Compressed_Tags(%j)))
                  #set l_Summary:vDeleted = l_Summary:vDeleted + l_Status:vDeleted
                  #if l_Status:vStatus == 0 #then -
                     @b_Success = true
                  #else -
                     @s = DO(DMT_MSG:CIN, -
                        "@P_FAILED_TO_DELETE_AFTER_COMPRESSION|'i'|" + -
                           FM_REPRESENT(%v_Compressed_Tags(%j)), -
                        "CAUTION", -
                        l_Status:vStatus)
               #loop_end
               @l_Status = FILE_MANAGER("DELETE", -
                  FM_FILE(("'gt_Temp_Dir'\DMT_'t_New_Number'.BIN", -
                     "'gt_Temp_Dir'\DMT_'t_New_Number'.LOG", -
                     "'gt_Temp_Dir'\DMT_'t_New_Number'.DIR")))
            #block_end
         #block_end
      #block_end

      ; Log the summary information
      @t_Message = "@P_FILESET_SUMMARY_" + l_Filesets:vAction(%i) + "|'i'"
      #case l_Filesets:vAction(%i)
         #when "COMPRESS" -
            @t_Message = %t_Message + -
               "|'l_Summary:vProcessed'|" + l_Filesets:vAction_Value(%i) + -
               "|'l_Summary:vDeleted'|'l_Summary:vFailed'"
         #when "MOVE" -
            @t_Message = %t_Message + -
               "|'l_Summary:vProcessed'|" + l_Filesets:vAction_Value(%i) + -
               "|'l_Summary:vFailed'"
         #when "DELETE" -
            @t_Message = %t_Message + "|'l_Summary:vDeleted'|'l_Summary:vFailed'"
      #case_end
      @s = DO(DMT_LOG:CIN, %t_Message, "INFORMATION")
   #block_end
   #else #block
      @s = DO(DMT_LOG:CIN, "@P_CONDITION_NOT_MET|'i'", "INFORMATION")
   #block_end
#loop_end

@s = DO(DMT_SET:CIN, 2, "")
@s = DO(DMT_MSG:CIN, "@M_COMMAND_PROCEDURE_COMPLETED", "INFORMATION")
