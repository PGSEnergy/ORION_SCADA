; Command Procedure: SYS_APLH2
; Version: SYS 600 9.3
; Description: This is command procedure for application supervision (in case of HSB applications)
; -------------------------------------------------------------------------------------------------

;read in object data
#case %SOURCE

   #when "APL_AS" #block
      @l_Obj_Vars = list(EVENT_SOURCE = %SOURCE, SOURCE = "'SOURCE'_EXT", TYPE = "APPLICATION", NUMBER = %SOURCE_NR, INDICATION = "AS_SECONDARY")
      @l_Obj_Data = do(apl:bsv40, "SSS", "GetObjectAttributes", l_Obj_Vars:vTYPE, l_Obj_Vars:vNUMBER)
   #block_end

   #when "APL_SP" #block
      @l_Obj_Vars = list(EVENT_SOURCE = %SOURCE, SOURCE = "'SOURCE'_EXT", TYPE = "APPLICATION", NUMBER = %SOURCE_NR, INDICATION = "SP_SECONDARY")
      @l_Obj_Data = do(apl:bsv40, "SSS", "GetObjectAttributes", l_Obj_Vars:vTYPE, l_Obj_Vars:vNUMBER)
   #block_end
     
   #otherwise @l_Obj_Data = list(STATUS = -1)
   
#case_end
   
;define events and update indication state
#if l_Obj_Data:vSTATUS == 0 #then #if l_Obj_Data:v'l_Obj_Vars:vINDICATION' <> "#" #then #block ; 1

   ;read in filtering info
   @l_Filtering_Info = do(apl:bsv40, "SSS", "GetFilterAttributes", "SYS_EVENT", l_Obj_Vars:vEVENT_SOURCE, %EVENT)

   ;read in general info
   @l_General_Info = APL:BSV45

   ;write to log, event/alarm activation
   #if l_Filtering_Info:vSTATUS == 0 #then #block ; 2

      ;write to log, if requested
      #if l_Filtering_Info:vLOG and l_General_Info:vENABLE_LOG #then -
         @i_Log_Write = do(apl:bsv40, "SSS", "WriteLogItem", "STE", "EVENT_SYS")

      ;activate event, if requested
      #if l_Filtering_Info:vEVENT and l_General_Info:vENABLE_EVENT #then #block
         @l_Event_Point = do(apl:bsv40, "SSS", "GetEvents", "EVENT", l_Obj_Vars:vTYPE, l_Obj_Vars:vNUMBER, list(SOURCE = l_Obj_Vars:vEVENT_SOURCE, EVENT = %EVENT), "SECONDARY")
         
         #if l_Event_Point:vSTATUS == 0 #then #set 'l_Event_Point:vEVENT' = 1
         #else #block
            @l_Event_Point = do(apl:bsv40, "SSS", "CreateProcessObject", l_Obj_Vars:vTYPE, "EVENT", l_Obj_Vars:vNUMBER, list(SOURCE = l_Obj_Vars:vEVENT_SOURCE, EVENT = %EVENT), "SECONDARY")
            #set 'l_Event_Point:vEVENT' = 1
         #block_end
      #block_end
      
      ;activate alarm, if requested
      #if l_Filtering_Info:vALARM and l_General_Info:vENABLE_ALARM #then #block
         @l_Alarm_Point = do(apl:bsv40, "SSS", "GetEvents", "ALARM", l_Obj_Vars:vTYPE, l_Obj_Vars:vNUMBER, list(SOURCE = l_Obj_Vars:vEVENT_SOURCE, EVENT = %EVENT), "SECONDARY")
         
         #if l_Alarm_Point:vSTATUS == 0 #then #set 'l_Alarm_Point:vALARM' = abs(1 - 'l_Alarm_Point:vALARM')
         #else #block
            @l_Alarm_Point = do(apl:bsv40, "SSS", "CreateProcessObject", l_Obj_Vars:vTYPE, "ALARM", l_Obj_Vars:vNUMBER, list(SOURCE = l_Obj_Vars:vEVENT_SOURCE, EVENT = %EVENT), "SECONDARY")
            #set 'l_Alarm_Point:vALARM' = 1
         #block_end
      #block_end
   
   #block_end ; 2
      #else_if l_Filtering_Info:vSTATUS > 0 #then @i_MsgLog = do(read_text("SYS_TOOL/msglog.scl"), "INFO [SSS, sys_aplh2:c]", l_Filtering_Info:vDESCRIPTIVE_TEXT)

   ;update indication process object
   #case l_Obj_Vars:vSOURCE

      #when "APL_AS_EXT" #block
         #if l_Filtering_Info:vSTATUS == 0 #then #block
            #if l_Filtering_Info:vALARM #then #set 'l_Obj_Data:vAS_SECONDARY' = 10
               #else #set 'l_Obj_Data:vAS_SECONDARY' = 0
         #block_end
         #else_if l_Filtering_Info:vSTATUS < 0 #then #set 'l_Obj_Data:vAS_SECONDARY' = 0
         #else #block
            #error ignore
               @i_OV = 1
               @i_OV = 'l_Obj_Data:vAS_SECONDARY' 
            #error stop
            #set 'l_Obj_Data:vAS_SECONDARY' = list(OV = %i_OV, OS = 4)
         #block_end
         ;update application state
         @l_Event_Object = do(apl:bsv40, "SSS", "GetLogicalNameAndIndex", l_Obj_Data:vAS_SECONDARY)
         @t_Event_Object = "'l_Event_Object:vLN':E'l_Event_Object:vIX'"
         #exec 't_Event_Object'
         
         #if l_Obj_Data:vPresentation <> "#" #then #block
            @l_Presentation_Object = do(apl:bsv40, "SSS", "GetLogicalNameAndIndex", l_Obj_Data:vPresentation)
            #set l_Presentation_Object:vIX = %NODE * 100 + 1000 + %SOURCE_NR
            @t_Presentation_Object = "'l_Presentation_Object:vLN':P'l_Presentation_Object:vIX'"           
            #case %EVENT
               #when "COLD" @i_Value = 1
               #when "WARM" @i_Value = 2
               #when "HOT" @i_Value = 3
               #otherwise @i_Value = -1
            #case_end
            #if %i_Value <> - 1 #then #set 't_Presentation_Object' = %i_Value           
         #block_end             
      #block_end

      #when "APL_SP_EXT" #block
         #if l_Filtering_Info:vSTATUS == 0 #then #block
            #if l_Filtering_Info:vALARM #then #set 'l_Obj_Data:vSP_SECONDARY' = 10
               #else #set 'l_Obj_Data:vSP_SECONDARY' = 0
         #block_end
         #else_if l_Filtering_Info:vSTATUS < 0 #then #set 'l_Obj_Data:vSP_SECONDARY' = 0
         #else #block
            #error ignore
               @i_OV = 1
               @i_OV = 'l_Obj_Data:vSP_SECONDARY'
            #error stop
            #set 'l_Obj_Data:vSP_SECONDARY' = list(OV = %i_OV, OS = 4)
         #block_end
         ;update application state
         @l_Event_Object = do(apl:bsv40, "SSS", "GetLogicalNameAndIndex", l_Obj_Data:vSP_SECONDARY)
         @t_Event_Object = "'l_Event_Object:vLN':E'l_Event_Object:vIX'"
         #exec 't_Event_Object'
         
         #if l_Obj_Data:vPresentation <> "#" #then #block
            @l_Presentation_Object = do(apl:bsv40, "SSS", "GetLogicalNameAndIndex", l_Obj_Data:vPresentation)
            
            #set l_Presentation_Object:vIX = %NODE * 100 + 1000 + %SOURCE_NR
            @t_Presentation_Object = "'l_Presentation_Object:vLN':P'l_Presentation_Object:vIX'"
            #case %EVENT
               #when "NONE" @i_Value = -1
               #when "TO_WARM_SD" @i_Value = 5
               #when "WARM_SD" @i_Value = 6
               #when "TO_HOT_SD" @i_Value = 7               
               #when "HOT_SD" @i_Value = 8
               #when "TO_WARM_RC" @i_Value = 9
               #when "WARM_RC" @i_Value = 10
               #when "TO_HOT_RC" @i_Value = 11
               #when "HOT_RC" @i_Value = 12
               #otherwise @i_Value = -1
            #case_end
            #if application_object_exists(0, "IX", LIST(LN="'l_Presentation_Object:vLN'", IX=l_Presentation_Object:vIX)) #then -
               #if %i_Value <> -1 #then #set 't_Presentation_Object' = %i_Value
        #block_end     

		#if %EVENT == "HOT_RC" #THEN #SET 'l_Obj_Data:vAS_SECONDARY' = 0
      #block_end
         
   #case_end

#block_end ; 1
   #else_if l_Obj_Data:vSTATUS > 0 #then @i_MsgLog = do(read_text("SYS_TOOL/msglog.scl"), "INFO [SSS, sys_aplh2:c]", l_Obj_Data:vDESCRIPTIVE_TEXT)
