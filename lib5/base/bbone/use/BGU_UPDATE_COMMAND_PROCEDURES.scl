; This file is executed by 
;
; This file does following:
; - Checks if revision of the installed SW module is higher than  
;   revision of SW module whose installation scripts were previously executed. Previous revision
;   is stored in REVISION_PROCEDURE (given as argument) command procedure.
; - If SW module revision is newer, creates command procedures of all scl files in located in DIRECTORY_PATH
;   The files are supposed to contain SCIL code.
;
; Procedure can handle version numbers from "0.0.0" to "99.99.99". Version number can 
; contain 1 to 3 parts (e.g. "1", "1.0" or "1.2.3")

#ARGUMENT SCRIPT_MODE, DIRECTORY_PATH, REVISION_PROCEDURE, PACKAGE_ID

#LOCAL E_STATE, LOCK_PATH, CHECK_LOCK, TXT_RUNNING_REVISION
#LOCAL TXT_INSTALLED_REVISION, FNAME, ST, UPDATE_NEEDED
#LOCAL VCT_RUNNING_REVISION, VCT_INSTALLED_REVISION, INT_RUNNING_REVISION, TRASH
#LOCAL INT_INSTALLED_REVISION, TAG, FILES_TO_RUN, I_FILES_TO_RUN, I
#LOCAL V_PROCEDURE, T_PROCEDURE, UPDATE_ALL = TRUE, TMP_VERSION
#LOCAL TXT_RELEASE_VERSION = "0", TXT_INST_RELEASE_VERSION = "0"

E_STATE=ERROR_STATE

;Set lock:
LOCK_PATH=path("pict")
LOCK_PATH=LOCK_PATH(1)
CHECK_LOCK=FILE_LOCK_MANAGER("LOCK", "'lock_path'\'REVISION_PROCEDURE'")
;#IF CHECK_LOCK=="LOCKED" #THEN #RETURN LIST(STATUS = -1, ERR_DESCRIPTION = "File locked")

;Get SW module revision from command procedure (when installation was run last time)
#IF APPLICATION_OBJECT_EXISTS(0, "C", REVISION_PROCEDURE) #THEN #BLOCK
   TMP_VERSION = DO('REVISION_PROCEDURE':C)
	#IF DATA_TYPE(TMP_VERSION) <> "TEXT" #THEN TXT_RUNNING_REVISION = "0"
	#ELSE #BLOCK
		TMP_VERSION = SEPARATE(TMP_VERSION, ":")
		TXT_RUNNING_REVISION = TMP_VERSION(1)
		#IF LENGTH(TMP_VERSION) > 1 #THEN TXT_RELEASE_VERSION = TMP_VERSION(2)
		#ELSE TXT_RELEASE_VERSION = TXT_RUNNING_REVISION
	#BLOCK_END
#BLOCK_END
#ELSE TXT_RUNNING_REVISION = "0"

;Get revision of installed SW module:
TMP_VERSION = SEPARATE(DO(READ_TEXT(DIRECTORY_PATH + "/" + REVISION_PROCEDURE + ".scl")), ":")
TXT_INSTALLED_REVISION = TMP_VERSION(1)
#IF LENGTH(TMP_VERSION) > 1 #THEN TXT_INST_RELEASE_VERSION = TMP_VERSION(2)
#ELSE TXT_INST_RELEASE_VERSION = TXT_INSTALLED_REVISION

VCT_RUNNING_REVISION=SET_STATUS(SUM(APPEND(DEC_SCAN(SEPARATE(TXT_RUNNING_REVISION, ".")),(0,0))*(10000,100,1)),0)
VCT_INSTALLED_REVISION=SET_STATUS(SUM(APPEND(DEC_SCAN(SEPARATE(TXT_INSTALLED_REVISION, ".")),(0,0))*(10000,100,1)),0)

INT_RUNNING_REVISION=VCT_RUNNING_REVISION(1)
INT_INSTALLED_REVISION=VCT_INSTALLED_REVISION(1)

#IF SCRIPT_MODE == "FORCED_UPDATE" #THEN UPDATE_NEEDED = TRUE
#ELSE #BLOCK
	#IF SCRIPT_MODE == "CHECK" AND TXT_RUNNING_REVISION == "0" #THEN UPDATE_NEEDED = FALSE
	#ELSE UPDATE_NEEDED = (INT_INSTALLED_REVISION > INT_RUNNING_REVISION)
#BLOCK_END

#IF UPDATE_NEEDED AND (SCRIPT_MODE == "UPDATE" OR SCRIPT_MODE == "FORCED_UPDATE")  #THEN #BLOCK
	#IF ARGUMENT_COUNT > 4 #THEN #BLOCK
		FILES_TO_RUN = ARGUMENT(5)
		UPDATE_ALL = FALSE
	#BLOCK_END
	#IF UPDATE_ALL #THEN #BLOCK
		TAG = FM_SCIL_DIRECTORY(DIRECTORY_PATH)
		FILES_TO_RUN=FM_REPRESENT(FILE_MANAGER("LIST", TAG))
	#BLOCK_END
   ST=CONSOLE_OUTPUT(TIMES  + " " + apl:bna + " 'PACKAGE_ID': Updating command procedures...")
   #ERROR CONTINUE
   #LOOP_WITH i_FILES_TO_RUN=1..length(FILES_TO_RUN)
      FNAME=FILES_TO_RUN(I_FILES_TO_RUN)
      V_PROCEDURE = SEPARATE(FNAME, ".")
      T_PROCEDURE = V_PROCEDURE(1)     
      #IF NOT APPLICATION_OBJECT_EXISTS(0, "C", T_PROCEDURE) #THEN #BLOCK
         #CREATE 'T_PROCEDURE':C = LIST(-   
            IU = 1,-
            MO = 1,-
            CM = "",-
            IN = READ_TEXT(DIRECTORY_PATH + "/" + FNAME))
      #BLOCK_END
      #ELSE #MODIFY 'T_PROCEDURE':C=LIST(IN = READ_TEXT(DIRECTORY_PATH + "/" + FNAME))
      ST = COMPILE('T_PROCEDURE':CIN)
      #IF ST.STATUS == 0 #THEN #MODIFY 'T_PROCEDURE':C = LIST(CP = ST.CODE)
   #LOOP_END   
   ST=CONSOLE_OUTPUT(TIMES  + " " + apl:bna + " 'PACKAGE_ID': Done.")
#BLOCK_END
CHECK_LOCK=FILE_LOCK_MANAGER("UNLOCK", "'lock_path'\'REVISION_PROCEDURE'")

#ERROR 'E_STATE'
#IF SCRIPT_MODE == "CHECK" #THEN #RETURN LIST(UPDATE = UPDATE_NEEDED, PREPARED = (TXT_RUNNING_REVISION <> "0"), STATUS = 0,-
	INSTALLED_REV = TXT_INST_RELEASE_VERSION, RUNNING_REV = SEPARATE(TXT_RELEASE_VERSION, "."))
#ELSE #RETURN LIST(STATUS = 0)
