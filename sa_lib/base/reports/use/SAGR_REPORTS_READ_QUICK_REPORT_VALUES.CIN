;CM =Interface for Monitor Pro Reports, Read Quick report values
; Function:    SAGR_REPORTS_READ_QUICK_REPORT_VALUES:C
; Version:     3.06 (build 13.11.2013)
; Parameters:  OBJECTS (all Object names)              
;              REPORT_TYPE  (HOUR,DAY_15...)               
;              TIME_INTERVAL (60,120,180)               
;              TIME_FROM, TIME_TO                  
; Return:      PAGE1=list( 
;                  Col1=vector(value1,value2,..)
;                  ColX=vector(value1,value2,..)
;                  Col_Totals1=list(Mean, Max,.. status/Value)
;                  OS1=vector(OS value 1, OS value 2,..)
;                  OSX=vector(OS value 1, OS value 2,..)
;                  Time=vector(time 1, time 2,...)
;                  Time_Interval
; Description: Read quick report values
;--------------------------------------------------------------------------------------------------
;Revision History
;Date       Vers.    Author Description
;13.11.2013 3.06     HoDa   Summary information values from SCIL
;--------------------------------------------------------------------------------------------------
#local i,c,v_ = vector(), i_Status = Status, cot,-
       b_TimeColumnOK = FALSE, b_BP_HistoryExists = false, b_BP_ReadCondition = false,-
		 b_IsInsideHistory = false,-
		 i_FirstYear = 2012, t_ObjectName = "",-
		 v_IX = vector(), v_OV = vector(), i_SumStatus = 0,-
		 i_MeanValue = 0, i_SumValue = 0, i_MinValue = 0, i_MaxValue = 0

@v_RemoveOS = vector()                                                          ;no OS removal
;@v_RemoveOS = vector(1,2,3,9,10,11)                                            ;9=manual entered, 10=not sampled, 11=no Data fetch

@Report_Type= "NONE"
@Quick_Report = true
@OUTPUT=list()

@QUICK_REPORT_OBJECTS=%ArgumentList.OBJECTS
#if length(%quick_report_objects)==0 #then #return %output

#if attribute_exists(%ArgumentList,"REPORT_TYPE") #then @REPORT_TYPE=%ArgumentList.REPORT_TYPE
#else #block
   cot=console_output("SAGR_REPORTS:C - Error: Report Type missing in Argument List","E","MREP")
   #return
#block_end   

#if %REPORT_TYPE=="HOUR" #then #block
   #if SAGR_REPORTS_READ_QUICK_REPORT_VALUES_HOUR:ccs==1 #then -
         #do SAGR_REPORTS_READ_QUICK_REPORT_VALUES_HOUR:ccp                     ;Data fetch in one step to speed up the reading
   #else #do SAGR_REPORTS_READ_QUICK_REPORT_VALUES_HOUR:c           
   #return
#block_end
#else_if %REPORT_TYPE<>"YEAR" #then #block
   #if SAGR_REPORTS_READ_QUICK_REPORT_VALUES_OTHER:ccs==1 #then -
         #do SAGR_REPORTS_READ_QUICK_REPORT_VALUES_OTHER:ccp                    ;Data fetch in one step to speed up the reading
   #else #do SAGR_REPORTS_READ_QUICK_REPORT_VALUES_OTHER:c           
   #return
#block_end

;*** This only for YEAR Quick Report
#create BMU_BASE:V         = list(DAYS = (31,28,31,30,31,30,31,31,30,31,30,31))

@T1 = %ArgumentList.TIME_FROM
@T2 = %ArgumentList.TIME_TO

#if data_type(%T1)<>"TIME" OR data_type(%T2)<>"TIME" #then #return

#if SAGR_REPORTS_CALCDATARANGE:ccs == 1 #then -
      #do SAGR_REPORTS_CALCDATARANGE:ccp   ;calculate the used data range 
#else #do SAGR_REPORTS_CALCDATARANGE:c

@START_TIME = %T1
@END_TIME   = %T2
@OUTPUT = list()
@COL_TIME  = vector()
@PAGE_DATA = list()
#loop_with c = 1..length(%QUICK_REPORT_OBJECTS)
   @COL'c' = vector()
   t_ObjectName = %QUICK_REPORT_OBJECTS(c)
   @l_ReportObject     = %l_ReportObjects.OBJ_'t_ObjectName'
   b_BP_HistoryExists  = %l_ReportObject.BP_HL >0 and (%l_ReportObject.ID <> "CS") 
;   @DEBUG="bSamplingHistory='bSamplingHistory'/bBasePeriodHistory='bBasePeriodHistory'"
   #loop_with i = 1 .. min(%DATA_LENGTH, %MAX_COUNT)
      @T1 = pack_time(year(%T1), i, 1, 0, 1, 0) + %BOD*3600
      @T2 = pack_time(year(%T1), i, %BMU_BASE.DAYS(i), 23, 59, 59) +%BOD*3600-40

      #if NOT b_TimeColumnOK #then @COL_TIME(i..i) = %T1

      #if b_BP_HistoryExists #then #block
         #if BMU_BP_IND:CCS == 1 #then #do BMU_BP_IND:CCP
         #else #do BMU_BP_IND:C
      #block_end

      #if b_BP_HistoryExists #then #block
         ;Year of (this year's January 1st minus base period history length times 365 days) is starting year of history
         i_FirstYear = year(pack_time(year(clock), 1, 1, 0, 0, 0) - %l_ReportObject.bp_hl * 365 * 86400)

         b_IsInsideHistory  = (%T1 > pack_time(i_FirstYear, month(%T1), day(%T1), hour(%T1), minute(%T1), second(%T1))) and -
                             (%T2 < clock)
         b_BP_ReadCondition = (((%START_TIME + (i - 1) * %TIME_INTERVAL) MOD %l_ReportObject.BP) == 0) AND b_IsInsideHistory
      #block_end
      #else b_BP_ReadCondition = false

      #if b_BP_ReadCondition #then #block
         @RESULT
         @DATA_ID = t_ObjectName

         #if BMU_BP_READ:CCS==1 #then #do BMU_BP_READ:CCP
         #else #do BMU_BP_READ:C

         i_Status = status
         @RESULT = DATA:VOV
         i_Status = status
         ;define period sums, if sums not yet calculated...
         #if i_Status == 0 #then -
            #if %l_ReportObject.BP == %TIME_INTERVAL or -
                (DATA_TYPE(%RESULT) <> "VECTOR") #then  @COL'c'(i .. i) = %RESULT * 1.0
            #else #block
               #case %l_ReportObject.id
                  #when "MS" @COL'c'(i .. i) =  sum(%RESULT)
                  #when "MM" @COL'c'(i .. i) = mean(%RESULT)         
                  #when "MN" @COL'c'(i .. i) =  low(%RESULT)         
                  #when "MX" @COL'c'(i .. i) = high(%RESULT)         
                  #otherwise @COL'c'(i .. i) =  sum(%RESULT)
               #case_end
            #block_end
         #else @COL'c'(i .. i) = set_status(vector(0), i_Status)
      #block_end
      #else @COL'c'(i .. i) = set_status(vector(0),11)                          ;Shows as empty in report
      @DATA
   #loop_end

   b_TimeColumnOK = true
   ;define column values
   #modify PAGE_DATA:V = list(COL'c' = %COL'c', OS'c' = get_status(%COL'c'))
	
	;Calculate summary information values
	v_IX = select(get_status(%COL'c'),"==9")                               		  ;*** replace OS=9 with OS=0, only values with OS = 0 will be used for summary calculation
	@COL'c' = spread(%COL'c', v_IX, set_status(pick(%COL'c',v_IX),0))
	v_IX = select(get_status(%COL'c'),"==1")                               		  ;*** replace OS=1 with OS=0, only values with OS = 0 will be used for summary calculation
	@COL'c' = spread(%COL'c', v_IX, set_status(pick(%COL'c',v_IX),0))

	v_OV = %COL'c'

	v_IX = select(get_status(v_OV),">0")
	#if length(v_IX) == length(v_OV) #then #block                       			  ;*** no valid data exists for summary calculation
		i_SumStatus = 10
		v_OV(1) = 0
	#block_end
	#else #block
		i_SumStatus = 0                                                  
		v_IX = select(get_status(v_OV),"==0")						  	     				  ;*** pick all valid data
		v_OV = pick(v_OV, v_IX)
	#block_end
	
	v_ = mean(v_OV)
   i_MeanValue = v_(1)
	v_ = sum(v_OV)
   i_SumValue  = v_(1)
	v_ = low(v_OV)
   i_MinValue = v_(1)
	v_ = high(v_OV)
   i_MaxValue  = v_(1)

   #modify PAGE_DATA:V = list(COL_TOTALS'c' = list(SumInfoValue1 = i_SumValue,  SumInfoValue1_Status = i_SumStatus,-
                                                   SumInfoValue2 = i_MeanValue, SumInfoValue2_Status = i_SumStatus,-
                                                   SumInfoValue3 = i_MinValue,  SumInfoValue3_Status = i_SumStatus,-
                                                   SumInfoValue4 = i_MaxValue,  SumInfoValue4_Status = i_SumStatus,-
																	SumInfoValue5 = 0,  SumInfoValue5_Status = 11,-
																	SumInfoValue6 = 0,  SumInfoValue6_Status = 11))
#loop_end

#modify OUTPUT:V = list(PAGE1 = %PAGE_DATA, TIME_INTERVAL = %TIME_INTERVAL, TIME = %COL_TIME)

