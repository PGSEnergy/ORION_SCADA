; Function:   BMU_StartUpdate2:C
; Version:    3.0 (Build 10.02.2012)
; Parameters:  GLOBAL var
;             l_ReportObject - ReportObject conf.
;             SP_DELAY - execution delay for sampling cycle
;             PF_DELAY - execution delay for period cycle
;Arguments:
;             e_SP_RT_Attr - last execution time for sampled values
;             e_BP_RT_Attr - last execution time for period values
;             e_SP_RT_Correction - last execution time for sampled values(- delay)
;             e_BP_RT_Correction - last execution time for period values(- delay)
;             e_SP_ShutdownTime - shutdown time for sampled values
;             e_BP_ShutdownTime - shutdown time for period values
;             i_SP_IntervalTime - interval time for sampling cycle(- delay)
;             i_BP_IntervalTime - interval time for period cycle(- delay)
; Return data: none
; Description: Update calculated report values at system start-up (Part 2)
;--------------------------------------------------------------------------------------------------
;Revision History
;Date       Vers.    Author Description
;--------------------------------------------------------------------------------------------------
#local i, i_=0, l_=list(), i_Status = status, cot,-
       i_IX1=0, i_IX2=0, l_Data=list(), i_AP = 0, i_SDP = 0, i_FP = 1,-
	   v_CalcData = vector(), l_Calc = list(),-
       i_NoSamplesInBP = 5, i_NoMissingSamples = 0

#error ignore

;*** update calculated values (upd_cycle: sampling period SP)
#if substr(%l_ReportObject.ID,1,2)=="CS" or substr(%l_ReportObject.ID,1,2)=="CB" #then #block

   #if %e_SP_ShutdownTime > %i_SP_IntervalTime #then #block
      #case %l_ReportObject.SP_HL
         #when 0 #block                                                         ;*** no sampling history
            i_NoSamplesInBP = %l_ReportObject.BP DIV %l_ReportObject.SP
            i_ = min(%e_SP_ShutdownTime DIV %l_ReportObject.SP, i_NoSamplesInBP)
            #case i_
               #when 0 
               #when i_NoSamplesInBP #block
                     #set 't_ObjectName':DOS(..) = 10
                     #set 't_ObjectName':DRT(..) = clock
               #block_end
               #otherwise #block
                  i_IX1 = i_ + 1
                  i_IX2 = i_NoSamplesInBP - i_ +1
                  l_Data = data_fetch(0, %t_ObjectName, i_IX1, 1, 0)
                  l_     = data_store(0, %t_ObjectName, l_Data, 1)
                  #set 't_ObjectName':DOS(i_IX2..) = 10
                  #set 't_ObjectName':DRT(i_IX2..) = clock
               #block_end
            #case_end
         #block_end
         #otherwise #block                                                      ;*** with sampling history
            @T1 = max(%e_SP_RT_Attr, clock - %l_ReportObject.SP_HL * 86400)
            @T2 = clock - %l_ReportObject.SP
            #if BMU_SP_IND:CCS==1 #then #do BMU_SP_IND:CCP
            #else #do BMU_SP_IND:C
            l_Calc = LIST(T1=%T1, T2=%T2, LE=%NS, MAX=%NBR_OF_VALUES)           ;*** NS, NBR_OF_VALUES from BMU_SP_IND

            #if attribute_exists(%l_ReportObject.CalcData) #then #block
               v_CalcData = %l_ReportObject.CalcData
               #do v_CalcData
               #loop_with i = 1..(l_Calc.LE)
                  i_ = l_Calc.T1 + (i-1)*%l_ReportObject.SP
                  @IND = trunc((i_ DIV %l_ReportObject.SP) mod l_Calc.MAX)+1
                  #if BMU_StartUpdate3:CCS==1 #then  #do BMU_StartUpdate3:CCP   ;*** sampling object calculation
                  #else #do BMU_StartUpdate3:C
               #loop_end
            #block_end
         #block_end
      #case_end
   #block_end
#block_end

;*** update calculated values (upd_cycle: period frequency)
#if substr(%l_ReportObject.ID,1,2)=="CP" or substr(%l_ReportObject.ID,1,2)=="CB" #then #block
   @T1 = %e_BP_RT_Attr
   @T2
   #if BMU_BP_IND:CCS==1 #then #do BMU_BP_IND:CCP                               ;*** index calculation for shutdown time
   #else #do BMU_BP_IND:C
   i_SDP = %IP1

   @T1 = clock
   @T2
   #if BMU_BP_IND:CCS==1 #then #do BMU_BP_IND:CCP                               ;*** index calculation for the actual running period
   #else #do BMU_BP_IND:C
   i_AP = %IP1
            
   #if ((%e_BP_ShutdownTime > %i_BP_IntervalTime) or -
        (i_AP > i_SDP)) #then #block                                            ;*** Shutdown time > one base period or one base period calc. missed
      @T1 = max(%e_BP_RT_Attr, PACK_TIME(YEAR-1, 1, 1, %BOD, 1, 0))
      @T2 = clock - %l_ReportObject.BP
      #if BMU_BP_IND:CCS==1 #then #do BMU_BP_IND:CCP
      #else #do BMU_BP_IND:C
      l_Calc = LIST(T1=%T1, T2=%T2, LE=%NP)
      
      #if attribute_exists(%l_ReportObject.CalcData) #then #block               ;*** run the calculation
         v_CalcData = %l_ReportObject.CalcData
         #do v_CalcData
         #loop_with i = 1..(l_Calc.LE)
            i_ = l_Calc.T1 + (i-1)*%l_ReportObject.BP - %BOD*3600
            @IND = TRUNC((i_ - PACK_TIME(YEAR(i_), 1, 1, 0, 0, 0)) div %l_ReportObject.BP)+1
            @e_YEAR = YEAR(i_) mod %l_ReportObject.BP_HL
            #if BMU_StartUpdate4:CCS==1 #then  #do BMU_StartUpdate4:CCP         ;*** base period object calculation
            #else #do BMU_StartUpdate4:C
         #loop_end
      #block_end
   #block_end
#block_end

i_Status = status
#if i_Status <> 0 #then cot = console_output("BMU_STARTUPDATE2:C - SCIL Error='i_Status'","E","MREP")
