;CM =Interface for Monitor Pro Reports, Read Quick report values for day_xx, month and week type
; Function:    SAGR_REPORTS_READ_QUICK_REPORT_VALUES_OTHER:C
; Version:     3.0.6 (build 13.11.2013)
; Parameters:  OBJECTS (all Object names)              
;              REPORT_TYPE  (DAY_15,  DAY_30, DAY_60, WEEK, MONTH)               
;              TIME_INTERVAL (60,120,180)               
;              TIME_FROM, TIME_TO                  
; Return:      PAGE1=list( 
;                  Col1=vector(value1,value2,..)
;                  ColX=vector(value1,value2,..)
;                  Col_Totals1=list(Mean, Max,.. Status/Value)
;                  OS1=vector(OS value 1, OS value 2,..)
;                  OSX=vector(OS value 1, OS value 2,..)
;                  Time=vector(time 1, time 2,...)
;                  Time_Interval
; Description: Read quick report values for other types than HOUR or YEAR
;--------------------------------------------------------------------------------------------------
;Revision History
;Date       Vers.    Author Description
;13.11.2013 3.06     HoDa   Summary information values from SCIL
;--------------------------------------------------------------------------------------------------
#local i,c, v_ = vector(), i_OS = 0, i_Status = Status, cot,-
       i_StartIndex = 1, i_LastIndex  = 1, i_DataCount = 1,-
       b_TimeColumnOK = FALSE, b_BP_HistoryExists = false, b_BP_ReadCondition = false,-
		 b_IsInsideHistory = false,-
		 i_FirstYear = 2012, t_ObjectName = "",-
		 v_IX = vector(), v_OV = vector(), i_SumStatus = 0,-
		 i_MeanValue = 0, i_SumValue = 0, i_MinValue = 0, i_MaxValue = 0

@Report_Type= "NONE"
@Quick_Report = true
@OUTPUT=list()

#if attribute_exists(%Argumentlist, "REPORT_TYPE") #then @REPORT_TYPE = %Argumentlist.REPORT_TYPE
#else #block
   cot = console_output("SAGR_REPORTS:C - Error: Invalid Report Type, it''s missing in Argument list","E","MREP")
   #return
#block_end   

@T1 = %Argumentlist.TIME_FROM
@T2 = %Argumentlist.TIME_TO

#if data_type(%T1) <> "TIME" OR data_type(%T2) <> "TIME" #then #return

#if SAGR_REPORTS_CALCDATARANGE:ccs == 1 #then -
      #do SAGR_REPORTS_CALCDATARANGE:ccp
#else #do SAGR_REPORTS_CALCDATARANGE:c

@START_TIME = %T1
@END_TIME   = %T2

@QUICK_REPORT_OBJECTS = %Argumentlist.OBJECTS
@OUTPUT   = list()
@COL_TIME = vector()

;Read and calculate report values
@PAGE_DATA = list()
#loop_with c = 1 .. length(%QUICK_REPORT_OBJECTS)

 ;initialize variables
   @COL'c' = vector()
   t_ObjectName = %QUICK_REPORT_OBJECTS(c)

   @l_ReportObject    = %l_ReportObjects.OBJ_'t_ObjectName'
   b_BP_HistoryExists = %l_ReportObject.BP_HL > 0 and (%l_ReportObject.ID <>"CS")

   #if b_BP_HistoryExists #then #block
      @T1 = %Start_Time
      #if BMU_BP_IND:CCS == 1 #then #do BMU_BP_IND:CCP
      #else #do BMU_BP_IND:C

      @RESULT
      @DATA_ID = t_ObjectName

      #if BMU_BP_READ:CCS == 1 #then #do BMU_BP_READ:CCP
      #else #do BMU_BP_READ:C

      #loop_with i = 1 .. min(%DATA_LENGTH,%MAX_COUNT)
         @T1 = %START_TIME + (i - 1) * %TIME_INTERVAL
         
         ;27.04.2009 HoDa fix to show data even sampling period is bigger than report page time interval
         #if (%TIME_INTERVAL div %l_ReportObject.BP) == 0 #then -               ;time interval unequal to base period, e.g. Day15 and BP30
               i_StartIndex = 1 + ((i-1) div (%l_ReportObject.BP div %TIME_INTERVAL))  ;i_s will be 1,3,5,7 ..., for 2,4,6.. condition check will return false
         #else i_StartIndex = 1 +  (i-1) * (%TIME_INTERVAL div %l_ReportObject.BP)     ;time interval bigger or equal to base period
                                                                                ;i_s will be [1,2,3 .. Day15 BP15],[1,3,5.. Day30 BP15],[1,5,9,.. Day60 BP15]
         
         #if (%TIME_INTERVAL div %l_ReportObject.BP) == 0 #then i_LastIndex = i_StartIndex     ;time interval unequal to base period, e.g. Day15 and BP30
         #else  i_LastIndex = i_StartIndex + (%TIME_INTERVAL div %l_ReportObject.BP)-1         ;time interval bigger or equal to base period
                                                                                ;i_e will be [1,2,3 .. Day15 BP15],[2,4,6.. Day30 BP15],[4,8,12,.. Day60 BP15]

         #if not b_TimeColumnOK #then @COL_TIME(i .. i) = %T1
   
         ;Year of (this year's January 1st minus base period history length times 365 days) is starting year of history
         i_FirstYear = year(pack_time(year(clock), 1, 1, 0, 0, 0) - %l_ReportObject.BP_HL * 365 * 86400)
         b_IsInsideHistory = (%T1 > pack_time(i_FirstYear, month(%T1), day(%T1), hour(%T1), minute(%T1), second(%T1))) or -
                             (%T2 < clock)
         b_BP_ReadCondition = (((%START_TIME + (i - 1) * %TIME_INTERVAL) MOD %l_ReportObject.BP)==0) and b_IsInsideHistory
   
         #if b_BP_ReadCondition  #then #block
            @RESULT
            i_Status = STATUS
            @RESULT  = DATA:VOV(i_StartIndex .. i_LastIndex)
            i_Status = STATUS
            ;define period sums, if sums not yet calculated...
            #if i_Status == 0 #then -
               #if %l_ReportObject.BP == %TIME_INTERVAL or -
                   (data_type(%RESULT) <> "VECTOR") #then  @COL'C'(i..i) = %RESULT*1.0
               #else #block
                  #case %l_ReportObject.id
                     #when "MS" @COL'C'(i..i) =  SUM(%RESULT)
                     #when "MM" @COL'C'(i..i) = MEAN(%RESULT)         
                     #when "MN" @COL'C'(i..i) =  LOW(%RESULT)         
                     #when "MX" @COL'C'(i..i) = HIGH(%RESULT)         
                     #otherwise @COL'C'(i..i) =  SUM(%RESULT)
                  #case_end
               #block_end
            #else @COL'c'(i .. i) = set_status(vector(0), i_Status)
         #block_end
         #else @COL'c'(i .. i) = set_status(vector(0), 11)                      ;*** Shows as empty in report
      #loop_end
      @DATA
   #block_end ;bBasePeriodHistory
   #else #block
      #if NOT b_TimeColumnOK #then @COL_TIME(1..1) = %T1
      @COL'c'(1..1) = set_status(vector(0), 11)
   #block_end

   b_TimeColumnOK = TRUE
   #if length(%v_RemoveOS) > 0 #then #block
      #loop_with i = 1 .. length(%v_RemoveOS)
         i_OS    = %v_RemoveOS(i)
         v_IX    = select(get_status(%COL'c'), "=='i_OS'")                    
         @COL'c' = spread(%COL'c', v_IX, set_status(pick(%COL'c', v_IX),0))
      #loop_end
   #block_end

   #modify PAGE_DATA:V = list(COL'c'=%COL'c', OS'c'=get_status(%COL'c'))

	;Calculate summary information values
	v_IX = select(get_status(%COL'c'),"==9")                               		  ;*** replace OS=9 with OS=0, only values with OS = 0 will be used for summary calculation
	@COL'c' = spread(%COL'c', v_IX, set_status(pick(%COL'c',v_IX),0))
	v_IX = select(get_status(%COL'c'),"==1")                               		  ;*** replace OS=1 with OS=0, only values with OS = 0 will be used for summary calculation
	@COL'c' = spread(%COL'c', v_IX, set_status(pick(%COL'c',v_IX),0))

	v_OV = %COL'c'
	
	v_IX = select(get_status(v_OV),">0")
	#if length(v_IX) == length(v_OV) #then #block                       			  ;*** no valid data exists for summary calculation
		i_SumStatus = 10
		v_OV(1) = 0
	#block_end
	#else #block
		i_SumStatus = 0                                                  
		v_IX = select(get_status(v_OV),"==0")						  	     				  ;*** pick all valid data
		v_OV = pick(v_OV, v_IX)
	#block_end
	
	v_ = mean(v_OV)
   i_MeanValue = v_(1)
	v_ = sum(v_OV)
   i_SumValue  = v_(1)
	v_ = low(v_OV)
   i_MinValue = v_(1)
	v_ = high(v_OV)
   i_MaxValue  = v_(1)

   #modify PAGE_DATA:V = list(COL_TOTALS'c' = list(SumInfoValue1 = i_SumValue,  SumInfoValue1_Status = i_SumStatus,-
                                                   SumInfoValue2 = i_MeanValue, SumInfoValue2_Status = i_SumStatus,-
                                                   SumInfoValue3 = i_MinValue,  SumInfoValue3_Status = i_SumStatus,-
                                                   SumInfoValue4 = i_MaxValue,  SumInfoValue4_Status = i_SumStatus,-
																	SumInfoValue5 = 0,  SumInfoValue5_Status = 11,-
																	SumInfoValue6 = 0,  SumInfoValue6_Status = 11))
#loop_end

#modify OUTPUT:V = list(PAGE1=%PAGE_DATA, TIME_INTERVAL=%TIME_INTERVAL, TIME=%COL_TIME)
