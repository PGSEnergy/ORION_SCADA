@C_SEARCH = FETCH(0,"C","BGU_CONTROL")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_CONTROL:C 
#BLOCK_END
@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_CONTROL.TXT")
#CREATE BGU_CONTROL:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "Interface for switch devices",-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_CONTROL:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_BLOCK")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_BLOCK:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_BLOCK.TXT")
#CREATE BGU_BLOCK:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "Interface for blocking functionality",-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_BLOCK:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_TRAFO")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_TRAFO:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_TRAFO.TXT")
#CREATE BGU_TRAFO:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "Interface for transformer",-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_TRAFO:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_BAYLR")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_BAYLR:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_BAYLR.TXT")
#CREATE BGU_BAYLR:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "Interface for bay L/R switch",-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_BAYLR:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_STALR")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_STALR:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_STALR.TXT")
#CREATE BGU_STALR:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "Interface for station L/R switch",-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_STALR:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_UPDATE")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_UPDATE:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_UPDATE.TXT")
#CREATE BGU_UPDATE:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "Interface for updating process data for control dialogs",-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_UPDATE:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_DIALUP")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_DIALUP:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_DIALUP.TXT")
#CREATE BGU_DIALUP:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "Interface for dial up functionality for control dialogs",-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_DIALUP:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_LTRK_EVENT")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_LTRK_EVENT:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_LTRK_EVENT.TXT")
#CREATE BGU_LTRK_EVENT:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "IEC 61850 service tracking events",-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_LTRK_EVENT:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_LTRK_SUPPRESS")
#IF C_SEARCH:VIU == -1 #THEN #BLOCK
   @CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_LTRK_SUPPRESS.TXT")
   #CREATE BGU_LTRK_SUPPRESS:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = "IEC 61850 suppress service tracking events",-
     IN = %CIN.TEXT)
#BLOCK_END

@C_SEARCH = FETCH(0,"C","BGU_SET_POWER_FLOW_DIRECTION")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_SET_POWER_FLOW_DIRECTION:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_SET_POWER_FLOW_DIRECTION.TXT")
#CREATE BGU_SET_POWER_FLOW_DIRECTION:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = translation("Power flow direction"),-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_SET_POWER_FLOW_DIRECTION:C = LIST(CP = TMP:VCODE)

;create event channel for power flow direction updating command procedure
@A_SEARCH = FETCH(0,"A","BGU_SET_POWER_FLOW_DIRECTION")
#IF A_SEARCH:VIU == -1 #THEN #BLOCK
#CREATE BGU_SET_POWER_FLOW_DIRECTION:A = LIST(-
   CM = translation("Power flow direction"),-
   OT = "C",-
   ON = "BGU_SET_POWER_FLOW_DIRECTION")
#BLOCK_END

@C_SEARCH = FETCH(0,"C","BGU_POWER_FLOW_SUMMARY")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_POWER_FLOW_SUMMARY:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_POWER_FLOW_SUMMARY.TXT")
#CREATE BGU_POWER_FLOW_SUMMARY:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = translation("Power flow summary calculation"),-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_POWER_FLOW_SUMMARY:C = LIST(CP = TMP:VCODE)

;create event channel for power flow direction updating command procedure
@A_SEARCH = FETCH(0,"A","BGU_POWER_FLOW_SUMMARY")
#IF A_SEARCH:VIU == -1 #THEN #BLOCK
#CREATE BGU_POWER_FLOW_SUMMARY:A = LIST(-
   CM = translation("Power flow summary calculation"),-
   OT = "C",-
   ON = "BGU_POWER_FLOW_SUMMARY")
#BLOCK_END

@C_SEARCH = FETCH(0,"C","BGU_POWER_FLOW_CALC")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_POWER_FLOW_CALC:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_POWER_FLOW_CALC.TXT")
#CREATE BGU_POWER_FLOW_CALC:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = translation("Power flow calculation"),-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_POWER_FLOW_CALC:C = LIST(CP = TMP:VCODE)

;create event channel for power flow calculation command procedure
@A_SEARCH = FETCH(0,"A","BGU_POWER_FLOW_CALC")
#IF A_SEARCH:VIU == -1 #THEN #BLOCK
#CREATE BGU_POWER_FLOW_CALC:A = LIST(-
   CM = translation("Power flow calculation"),-
   OT = "C",-
   ON = "BGU_POWER_FLOW_CALC")
#BLOCK_END

@C_SEARCH = FETCH(0,"C","BGU_POWER_FLOW_LN_MAPPING")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_POWER_FLOW_LN_MAPPING:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_POWER_FLOW_LN_MAPPING.TXT")
#CREATE BGU_POWER_FLOW_LN_MAPPING:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = translation("Power flow indicator mapping"),-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_POWER_FLOW_LN_MAPPING:C = LIST(CP = TMP:VCODE)

@C_SEARCH = FETCH(0,"C","BGU_SET_GENERATOR_ON_OFF")
#IF C_SEARCH:VIU <> -1 #THEN #BLOCK
   #DELETE BGU_SET_GENERATOR_ON_OFF:C 
#BLOCK_END

@CIN=TEXT_READ("/SA_LIB/BASE/BBONE/USE/BGU_SET_GENERATOR_ON_OFF.TXT")
#CREATE BGU_SET_GENERATOR_ON_OFF:C = LIST(-
     IU = 1,-
     MO = 1,-
     PE = 0,-
     PQ = 0,-
     CM = translation("Generator state"),-
     IN = %CIN.TEXT)
@TMP = COMPILE(%CIN.TEXT)
#IF TMP:VSTATUS == 0 #THEN #MODIFY BGU_SET_GENERATOR_ON_OFF:C = LIST(CP = TMP:VCODE)

;create event channel for generator indication updating command procedure
@A_SEARCH = FETCH(0,"A","BGU_SET_GENERATOR_ON_OFF")
#IF A_SEARCH:VIU == -1 #THEN #BLOCK
#CREATE BGU_SET_GENERATOR_ON_OFF:A = LIST(-
   CM = translation("Set generator indication"),-
   OT = "C",-
   ON = "BGU_SET_GENERATOR_ON_OFF")
#BLOCK_END

;create process object for the blocking / deblocking events if it does not exist
@P_SEARCH = FETCH(0,"P","B_BLOCKING")
#IF P_SEARCH:VIU == -1 #THEN #CREATE B_BLOCKING:P10 = LIST (-
          PT = 9,-                                     ;process object type = AI
          DX = "9",-                                   ;directive text
          AI = 0,-                                     ;object value = 0
          OI = "Blocking List",-                       ;object identification
          OX = "Process Object For BL Events",-        ;object text
          IU = 1,-                                     ;in use = yes
          SS = 2,-                                     ;switch state = auto
          EE = 1,-                                     ;event enable = yes
          HE = 1,-                                     ;history enable = yes
          HA = 2,-                                     ;history activation = update
          HF = 1,-                                     ;history at first update = yes
          HL = BIT_MASK(15),-                          ;history log number = 15
          HI = 0,-                                     ;upper alarm limit = 0
          HW = 0,-                                     ;upper warning limit = 0
          LW = 0,-                                     ;lower warning limit = 0
          LI = 0,-                                     ;lower alarm limit = 0
          ST = "Blocking",-                            ;unit of value
          SN = "1_1",-                                 ;scale name
          SZ = 1,-                                     ;zone supervision = SCADA
          RC = 0,-                                     ;receipt = acknowledgement not required
          AB = 0,-                                     ;alarm blocking = no
          AC = 0,-                                     ;alarm class = disabled
          AD = 0,-                                     ;alarm delay = 0
          PD = 0,-                                     ;picture device = none
          PI = "",-                                    ;alarm picture = none
          PF = "FORM4B_BLE",-                          ;physical format for printout
          PA = 0,-                                     ;printout activation = alarm
          PU = 0,-                                     ;picture/ printout at first update = no
          RX = "                    FBASYSXBLK")       ;group information

