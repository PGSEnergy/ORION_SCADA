;OBJECT       : SAI_SSW.DAT
;Copyright Hitachi Power Grids. All rights reserved.
;
;DESCRIPTION  : The configuration data file for the switching device standard function
;	                             
;----------------------------------------------------------------------------

##FUNC_INIT_BEGIN

@'.ID'_PICTURE_FUNCTION_CONF = LIST(-
   CREATED_BY                = "SA_LIB",-
   CONFIG_DATA_FILE          = "?CONF_FILE?",-
   LIB_REVISION              = " 3.0",-
   TYPE_PF                   = "?REQUIRED_PF_NAME?",-
   DEFAULT_TYPE_PF           = "SAGR_SW",-
   CONTROL_DIALOG            = "F_USE/FPU_SSWA",-
   CONTROL_DIALOG_WINDOW     = "MNOPER",-
   STATION_NAME              = "",-
   BAY_NAME                  = "",-
   DEVICE_NAME               = "",-
   SPECIAL_IDENTIFIER_1      = "",-
   SPECIAL_IDENTIFIER_2      = "",-
   SPECIAL_IDENTIFIER_3      = "",-
   SWITCHING_DEVICE_TYPE     = "QB",-
   SWITCHING_DEVICE_PURPOSE  = "01",-
   SWITCH_SECTION            = 0,-
   P_OBJECT_LN               = "",-
   P_OBJECT_INDEXES          = "",-
   STATION_TYPE              = "IEC61850",-
   DEFINE_ITEM_NAME          = FALSE,-
   INDICATION_TYPE           = "DB",-
   MOTORIZED                 = TRUE,-
   INTERLOCKING_BYPASS       = FALSE,-
   SYNCHROCHECK_BYPASS       = FALSE,-
   TAGOUT                    = FALSE,-
   CMD_PARAMETER             = 4,-
   CONTROL_SUPERVISION_TIMEOUT = 0,-
   CONTROL_SUPERVISION_ALARM = 1,-
   CONTROL_TYPE              = "SEC-5AO",-
   OUTPUT_STATUS             = FALSE,-
   CONTROL_PULSE_LENGTH      = 0,-
   CONTROL_BITS              = VECTOR(),-
   QUALIFIERS                = VECTOR(),-
   DATA_ACQUISITION_UNIT     = "",-
   FUNCTION_BLOCK            = "",-
   CHANNEL_NUMBER            = 0,-
   AUTHORIZATION_GROUP       = "MV_CONTROL",-
   BAY_LR_POLARITY           = "L1",-
   AUXILIARY_PLUG            = FALSE,-
   EVENT_RECORDING           = FALSE,-
   REPRESENTATION            = "F_REPR/NO_REPR_S",-
   OBJECT_TYPE_DESCRIPTION   = "B5_USE/BPU_SWITCH.scl",-
   OPC_ITEM_PREFIX           = "IEC61850 Subnetwork.IED1.LD1",-
   OPC_LN_INSTANCES          = VECTOR("CSWI1","CILO1"),-
   UNIT_NUMBER               = 0,-
   SHORT_ADDRESS             = VECTOR(""),-
   DA_CONFIG_FILE            = "",-
   ADD_CAUSE_IX              = 55,-
   LIB_OBJECT_TYPE           = "",-
   OPERATOR_PLACE_HANDLING   = "NONE",-
   CREATE_TOPO_INTL_CAUSE    = FALSE,-
   TOPO_OBJECT_TYPE          = "",-
   TOPO_OBJECT_OPEN_IX       = 10,-
   TOPO_OBJECT_CLOSE_IX      = 10,-
   TOPO_OBJECT_TRUCK_SECTION = 1,-
   TOPO_OBJECT_INTL_IX       = 252,-
	SYN_IND_IX                = 22,-
   TOPO_OBJECT_X_POS         = ( 8, 8, 0,16),-
   TOPO_OBJECT_Y_POS         = ( 0,20,10,10),-
   SA_LIB_INDEXES            = "20,19,13")

##FUNC_INIT_END

##FUNC_DEF_BEGIN

;check the usage of object identification (OI) -attribute
@S = STATUS
@POINTER_STA  = 0
@POINTER_BAY  = 0
@POINTER_DEV  = 0
#ERROR IGNORE
@APL_BSV15      = APL:BSV15
@PROCESSOBJECTS = APL_BSV15:VPROCESS_OBJECTS
@OI             = PROCESSOBJECTS:VOI
#LOOP_WITH I = 1 .. 30
  #IF DATA_TYPE(OI:VLENGTH'I')=="INTEGER" #THEN #BLOCK  
    @OI_LENGTH'I' = OI:VLENGTH'I'
    ;if field in use
    #IF %OI_LENGTH'I' > 0 #THEN #BLOCK  
      @NR_OF_FIELDS = %I
      @OI_TITLE'I'  = OI:VTITLE'I'
      @OI_FIELD'I'  = OI:VFIELD'I'
      #IF      LENGTH(SELECT(%OI_FIELD'I',"==""STA"""))>0 #THEN @POINTER_STA = %I
      #ELSE_IF LENGTH(SELECT(%OI_FIELD'I',"==""BAY"""))>0 #THEN @POINTER_BAY = %I
      #ELSE_IF LENGTH(SELECT(%OI_FIELD'I',"==""DEV"""))>0 #THEN @POINTER_DEV = %I
    #BLOCK_END
    #ELSE #BLOCK
      @OI_TITLE'I'  = ""
      @OI_FIELD'I'  = ""
    #BLOCK_END
  #BLOCK_END
  #ELSE #LOOP_EXIT
#LOOP_END
#ERROR STOP

;set defaults if APL:BSV15 not correctly defined
@S = STATUS
#IF %S <> 0 #THEN #BLOCK
  @OI_TITLE1    = "Substation"
  @OI_TITLE2    = "Bay"
  @OI_TITLE3    = "Device"
  @OI_TITLE4    = ""
  @OI_TITLE5    = ""
  @OI_LENGTH1   = 10
  @OI_LENGTH2   = 15
  @OI_LENGTH3   = 5
  @OI_LENGTH4   = 0
  @OI_LENGTH5   = 0
  @POINTER_STA  = 1
  @POINTER_BAY  = 2
  @POINTER_DEV  = 3
  @NR_OF_FIELDS = 3
#BLOCK_END

;set configurable attributes according to OI-configuration
@NR_OF_SPECIAL_FIELD = 0
@OBJECT_IDENTIFIERS  = VECTOR()

#LOOP_WITH I = 1 .. 30
  #IF %I <= %NR_OF_FIELDS #THEN #BLOCK  

    ;define the name of the configurable attribute
    #IF      %I == %POINTER_STA #THEN @OBJECT_IDENTIFIER_'I'_NAME = "STATION_NAME"
    #ELSE_IF %I == %POINTER_BAY #THEN @OBJECT_IDENTIFIER_'I'_NAME = "BAY_NAME"
    #ELSE_IF %I == %POINTER_DEV #THEN @OBJECT_IDENTIFIER_'I'_NAME = "DEVICE_NAME"
    #ELSE #BLOCK
      @NR_OF_SPECIAL_FIELD = %NR_OF_SPECIAL_FIELD + 1
      @OBJECT_IDENTIFIER_'I'_NAME = "SPECIAL_IDENTIFIER_'NR_OF_SPECIAL_FIELD'"
    #BLOCK_END

    ;set one space between different fields
    #IF %I < %NR_OF_FIELDS AND %OI_LENGTH'I' > 1 #THEN @OBJECT_IDENTIFIER_'I'_MAX_LENGTH = %OI_LENGTH'I' - 1
    #ELSE @OBJECT_IDENTIFIER_'I'_MAX_LENGTH = %OI_LENGTH'I'

    ;create a list of previously used identifiers
    @SECTION  = %OBJECT_IDENTIFIER_'I'_NAME
    @KEYS     = VECTOR()
    #LOOP_WITH J = 1 .. 10
      @NEW_KEY= "'SECTION''J'"
      @KEY'J' = READ_PARAMETER("PICT/OBJ_IDEN.INI",%SECTION,%NEW_KEY)
      @KEY    = %KEY'J'
      #IF KEY:VSTATUS == 0 #THEN #BLOCK
        @KEYS = APPEND(%KEYS,KEY:VVALUE)
       #BLOCK_END
    #LOOP_END
    @OBJECT_IDENTIFIER_'I'_VALUES = %KEYS

    ;set configuration for SCT
    @OBJECT_IDENTIFIER_'I' = LIST(-
         NAME       = %OBJECT_IDENTIFIER_'I'_NAME,-
         TYPE       = "EDITABLE_SELECTOR",-
         INPUT_TYPE = "TEXT",-
         VALUES     = %OBJECT_IDENTIFIER_'I'_VALUES,-
         REPRESENT  = %OBJECT_IDENTIFIER_'I'_VALUES,-
         MAX_LENGTH = %OBJECT_IDENTIFIER_'I'_MAX_LENGTH)
    @OBJECT_IDENTIFIERS = APPEND(%OBJECT_IDENTIFIERS, %OBJECT_IDENTIFIER_'I')
  #BLOCK_END
  #ELSE #LOOP_EXIT
#LOOP_END

;based on the switching device type define a proper selection list for
;switching device purpose, switch section and control type
;QB,QI,QS
@SWITCHING_DEVICE_PURPOSE_LIST1 = LIST(-
     VALUES    = ("01",-
                  "02",-
                  "03",-
                  "04",-
                  "05",-
                  "06",-
                  "07",-
                  "08"),-
     REPRESENT = ("Circuit breaker",-
                  "Main busbar circuit breaker",-
                  "Main busbar A circuit breaker",-
                  "Main busbar B circuit breaker",-
                  "Reserve busbar circuit breaker",-
                  "By-pass circuit breaker",-
                  "Bus-section circuit breaker",-
                  "Bus-coupler circuit breaker"))

;QD,QF,QL
@SWITCHING_DEVICE_PURPOSE_LIST2 = LIST(-
     VALUES    = ("01",-
                  "02",-
                  "03",-
                  "04",-
                  "05",-
                  "06",-
                  "07",-
                  "08",-
                  "09",-
                  "10",-
                  "11",-
                  "12",-
                  "13",-
                  "14"),-
     REPRESENT = ("Disconnector",-
                  "Main busbar disconnector",-
                  "Main busbar A disconnector",-
                  "Main busbar B disconnector",-
                  "Reserve busbar disconnector",-
                  "By-pass disconnector",-
                  "Line disconnector",-
                  "Line disconnector A",-
                  "Line disconnector B",-
                  "Bus-section disconnector",-
                  "Bus-section A disconnector",-
                  "Bus-section B disconnector",-
                  "Bus-section C disconnector",-
                  "Bus-coupler disconnector"))

;QE
@SWITCHING_DEVICE_PURPOSE_LIST3 = LIST(-
     VALUES    = ("01",-
                  "02",-
                  "03",-
                  "04",-
                  "05",-
                  "06",-
                  "07",-
                  "08",-
                  "09",-
                  "10"),-
     REPRESENT = ("Earth switch",-
                  "Main busbar earth switch",-
                  "Main busbar A earth switch",-
                  "Main busbar B earth switch",-
                  "Reserve busbar earth switch",-
                  "By-pass earth switch",-
                  "Line earth switch",-
                  "Line earth switch A",-
                  "Line earth switch B",-
                  "CT-section earth switch"))

;QM
@SWITCHING_DEVICE_PURPOSE_LIST4 = LIST(-
     VALUES    = VECTOR("01"),-
     REPRESENT = VECTOR("Fault-making switch"))

;Q3
@SWITCHING_DEVICE_PURPOSE_LIST5 = LIST(-
     VALUES    = VECTOR("01"),-
     REPRESENT = VECTOR("Three-state switch"))

;QT
@SWITCHING_DEVICE_PURPOSE_LIST6 = LIST(-
     VALUES    = VECTOR("01"),-
     REPRESENT = VECTOR("Truck"))

;set default lists for switching device purpose
@SWITCHING_DEVICE_PURPOSE_VALUES    = SWITCHING_DEVICE_PURPOSE_LIST1:VVALUES
@SWITCHING_DEVICE_PURPOSE_REPRESENT = SWITCHING_DEVICE_PURPOSE_LIST1:VREPRESENT

;QB,QD,QE,QF,QI,QL,QM,QS
@SWITCH_SECTION_LIST1 = LIST(-
     REPRESENT = ("","",""))

;Q3
@SWITCH_SECTION_LIST2 = LIST(-
     REPRESENT = ("",-
                  "Disconnector",-
                  "Earth switch"))

;QT
@SWITCH_SECTION_LIST3 = LIST(-
     REPRESENT = ("",-
                  "First section",-
                  "Second section"))

;set default lists for switch section
@SWITCH_SECTION_REPRESENT = SWITCH_SECTION_LIST1:VREPRESENT

;** TiLI 2.11.2003: ID 7527
;lists for cmd parameter
@CMD_PARAMETER_LIST = LIST(-
     VALUES    = (4,-
                  5,-
                  6,-
                  45,-
                  46,-
                  48,-
                  49,-
                  50),-
     REPRESENT = ("Select-Operate",-
                  "Direct",-
                  "Direct-No ack.",-
                  "Single command",-
                  "Double command",-
                  "Normalized value",-
                  "Scaled value",-
                  "Short floating point number"))

@CMD_PARAMETER_LIST1= LIST(-
     VALUES    = (4,-
                  5,-
                  6),-
     REPRESENT = ("Select-Operate",-
                  "Direct",-
                  "Direct-No ack."))

@CMD_PARAMETER_LIST2 = LIST(-
     VALUES    = (45,-
                  46,-
                  58,-
                  59),-
     REPRESENT = ("Single command (ASDU 45)",-
                  "Double command (ASDU 46)",-
                  "Single command with time tag (ASDU 58)",-
                  "Double command with time tag (ASDU 59)"))

@CMD_PARAMETER_LIST3 = LIST(-
     VALUES    = (48,-
                  49,-
                  50,-
                  61,-
                  62,-
                  63),-
     REPRESENT = ("Normalized value (ASDU 48)",-
                  "Scaled value (ASDU 49)",-
                  "Short floating point number (ASDU 50)",-
                  "Normalized value with time tag (ASDU 61)",-
                  "Scaled value with time tag (ASDU 62)",-
                  "Short floating point number with time tag (ASDU 63)"))

;set default lists for cmd parameter
@CMD_PARAMETER_VALUES    = CMD_PARAMETER_LIST1:VVALUES
@CMD_PARAMETER_REPRESENT = CMD_PARAMETER_LIST1:VREPRESENT

;QB,QD,QE,QF,QI,QL,QM,QS,QT
@CONTROL_TYPE_LIST1 = LIST(-
     VALUES    = ("SEC-5AO",-
                  "SEC-5BO",-
                  "SEC-4BO",-
                  "SEC-2BO",-
                  "SEC-2DO",-
                  "SEC-BO",-
                  "DIR-BO",-
                  "AO",-
                  "OBJECT_TYPE"),-
     REPRESENT = ("Secured cmd with 5 AOs",-
                  "Secured cmd with 5 BOs",-
                  "Secured cmd with 4 BOs",-
                  "Direct cmd with 2 BOs",-
                  "Direct cmd with 2 DOs",-
                  "Secured cmd with 1 BO",-
                  "Direct cmd with 1 BO",-
                  "Command with AO",-
                  "Use from Object Type"))

;Q3
@CONTROL_TYPE_LIST2 = LIST(-
     VALUES    = ("SEC-5AO",-
                  "SEC-4BO",-
                  "SEC-2BO",-
                  "SEC-2DO",-
                  "SEC-BO",-
                  "DIR-BO",-
                  "AO"),-
     REPRESENT = ("Secured cmd with 10 AOs",-
                  "Secured cmd with 6 BOs",-
                  "Secured cmd with 4 BOs",-
                  "Secured cmd with 4 DOs",-
                  "Secured cmd with 2 BOs",-
                  "Direct cmd with 2 BOs",-
                  "Command with 2 AOs"))

;set default lists for control type
@CONTROL_TYPE_VALUES    = CONTROL_TYPE_LIST1:VVALUES
@CONTROL_TYPE_REPRESENT = CONTROL_TYPE_LIST1:VREPRESENT

;supported protocols
@STATION_TYPE_VALUES = (-
                  "SPA",-
                  "ANSI",-
                  "LON",-
                  "RTU",-
                  "RTU_E",-
                  "IEC101",-
                  "IEC103",-
                  "ICCP")

@STATION_TYPE_REPRESENT = (-
                  "SPA",-
                  "ANSI",-
                  "LON",-
                  "RP570",-
                  "RP570 with FTABs",-
                  "IEC 870-5-101/104",-
                  "IEC 870-5-103",-
                  "ICCP")

#IF ROOT.ST_GET_LIB_REVISION > " 2.3" #THEN #BLOCK
   @STATION_TYPE_VALUES = APPEND(%STATION_TYPE_VALUES,("DNP_30","MODBUS_RTU"))
   @STATION_TYPE_REPRESENT = APPEND(%STATION_TYPE_REPRESENT,("DNP 3.0","MODBUS RTU"))
#BLOCK_END

@STATION_TYPE_VALUES    = APPEND(%STATION_TYPE_VALUES, VECTOR("PROC"))
@STATION_TYPE_REPRESENT = APPEND(%STATION_TYPE_REPRESENT, VECTOR("PROCOL"))

#IF ROOT.ST_GET_LIB_REVISION > " 2.9" #THEN #BLOCK
   @STATION_TYPE_VALUES = APPEND(%STATION_TYPE_VALUES,("IEC61850"))
   @STATION_TYPE_REPRESENT = APPEND(%STATION_TYPE_REPRESENT,("IEC 61850-8"))
#BLOCK_END

;read the list of data acquisition units
#DO READ_TEXT("SAGR_INST/SAI_DAU.TXT")
;read the list of function blocks
#DO READ_TEXT("SAGR_INST/SAI_FB.TXT")

;create a list of all existing authorization groups
#ERROR IGNORE
@AUTHORIZATION_GROUPS = LIST_ATTR(MON:BSV(9))
#IF DATA_TYPE(%AUTHORIZATION_GROUPS) <> "VECTOR" #THEN @AUTHORIZATION_GROUPS = VECTOR()
#ERROR CONTINUE

@REPR_LIST = LIST


#IF ROOT.ST_GET_LIB_REVISION > " 2.3" #THEN #BLOCK
  @FUNC_DEF=LIST(-
      CONFIGURABLE_ATTRIB = (-
                  "STATION_NAME",-
                  "BAY_NAME",-
                  "DEVICE_NAME",-
                  "SPECIAL_IDENTIFIER_1",-
                  "SPECIAL_IDENTIFIER_2",-
                  "SPECIAL_IDENTIFIER_3",-
                  "SWITCHING_DEVICE_TYPE",-
                  "SWITCHING_DEVICE_PURPOSE",-
                  "SWITCH_SECTION",-
                  "P_OBJECT_LN",-
                  "P_OBJECT_INDEXES",-
                  "STATION_TYPE",-
                  "DEFINE_ITEM_NAME",-
                  "OPC_ITEM_PREFIX",-
                  "OPC_LN_INSTANCES",- 
                  "INDICATION_TYPE",-
                  "MOTORIZED",-
                  "SYNCHROCHECK_BYPASS",-
                  "CMD_PARAMETER",-
                  "CONTROL_SUPERVISION_TIMEOUT",-
                  "CONTROL_TYPE",-
                  "OUTPUT_STATUS",-
                  "CONTROL_PULSE_LENGTH",-
                  "CONTROL_BITS",-
                  "QUALIFIERS",-
                  "AUTHORIZATION_GROUP",-
                  "BAY_LR_POLARITY",-
                  "TAGOUT",-
                  "AUXILIARY_PLUG",-
                  "EVENT_RECORDING",-
                  "REPRESENTATION",-
                  "TOPO_OBJECT_TYPE",-
                  "TOPO_OBJECT_OPEN_IX",-
                  "TOPO_OBJECT_CLOSE_IX",-
                  "TOPO_OBJECT_TRUCK_SECTION",-
                  "TOPO_OBJECT_INTL_IX"),-
      SCT_ATTRIBUTES = (-
                  LIST(NAME              =  "P_OBJECT_LN",-
                       TYPE              =  "TEXT",-
                       MAX_LENGTH        =  63),-
                  LIST(NAME              =  "SWITCHING_DEVICE_TYPE",-
                       TYPE              =  "SELECTOR",-
                       VALUES            = ("QB",-
                                            "QS",-
                                            "QI",-
                                            "QD",-
                                            "QF",-
                                            "QL",-
                                            "QE",-
                                            "QM",-
                                            "QT",-
                                            "Q3"),-
                       REPRESENT         = ("Circuit breaker",-
                                            "Circuit breaker with synchro-check",-
                                            "Circuit breaker-isolator",-
                                            "Disconnector",-
                                            "Fuse switch",-
                                            "Load breaking switch",-
                                            "Earth switch",-
                                            "Fault-making switch",-
                                            "Truck",-
                                            "Three-state switch"),-
                       CHANGE_CALLBACK   =  VECTOR("#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_SWITCHING_DEVICE_TYPE"")")),-
                  LIST(NAME              =  "SWITCHING_DEVICE_PURPOSE",-
                       TYPE              =  "SELECTOR",-
                       VALUES            =  %SWITCHING_DEVICE_PURPOSE_VALUES,-
                       REPRESENT         =  %SWITCHING_DEVICE_PURPOSE_REPRESENT),-
                  LIST(NAME              =  "SWITCH_SECTION",-
                       TYPE              =  "SELECTOR",-
                       VALUES            = (0,-
                                            1,-
                                            2),-
                       REPRESENT         = ("","","")),-
                  LIST(NAME              =  "STATION_TYPE",-
                       TYPE              =  "SELECTOR",-
                       VALUES            =  %STATION_TYPE_VALUES,-
                       REPRESENT         =  %STATION_TYPE_REPRESENT,-
                       CHANGE_CALLBACK   =  VECTOR("#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_STATION_TYPE"")")),-
                  LIST(NAME              =  "DEFINE_ITEM_NAME",-
                       TYPE              =  "BOOLEAN",-
                       CHANGE_CALLBACK   =  VECTOR("#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_DEFINE_ITEM_NAME"")")),-
                  LIST(NAME              =  "OPC_ITEM_PREFIX",-
                       TYPE              =  "TEXT",-
                       MAX_LENGTH        =  255),-
                  LIST(NAME              =  "OPC_LN_INSTANCES",-
                       TYPE              =  "VECTOR",-
                       ELEMENT_TYPE      =  "TEXT",-
                       MAX_LENGTH        =  15,-
                       MAX_ELEMENT_LENGTH=  15,-
                       MIN_ELEMENT_LENGTH=  0),-
                  LIST(NAME              =  "INDICATION_TYPE",-
                       TYPE              =  "SELECTOR",-
                       VALUES            = ("DB",-
                                            "BI",-
                                            "2BI",-
                                            "AI"),-
                       REPRESENT         = ("Double indication (DB)",-
                                            "Single indication (BI)",-
                                            "2 x Single indications (2xBI)",-
                                            "Analog input (AI)")),-
                  LIST(NAME              =  "MOTORIZED",-
                       TYPE              =  "BOOLEAN",-
                       CHANGE_CALLBACK   =  VECTOR("#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_MOTORIZED"")")),-
                  LIST(NAME              =  "INTERLOCKING_BYPASS",-
                       TYPE              =  "BOOLEAN"),-
                  LIST(NAME              =  "SYNCHROCHECK_BYPASS",-
                       TYPE              =  "BOOLEAN",-
                       CHANGE_CALLBACK   =  VECTOR("#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_SYNCHROCHECK_BYPASS"")")),-
                  LIST(NAME              =  "CONTROL_TYPE",-
                       TYPE              =  "SELECTOR",-
                       VALUES            =  %CONTROL_TYPE_VALUES,-
                       REPRESENT         =  %CONTROL_TYPE_REPRESENT,-
                       CHANGE_CALLBACK   =  VECTOR("#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_MOTORIZED"")", "#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_CONTROL_TYPE"")", "#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_CONTROL_SUPERVISION_TIMEOUT"")")),-
                  LIST(NAME		        =  "CMD_PARAMETER",-
                       TYPE		        =  "SELECTOR",-
                       VALUES		        =  %CMD_PARAMETER_VALUES,-
                       REPRESENT         =  %CMD_PARAMETER_REPRESENT),-
                  LIST(NAME              =  "CONTROL_PULSE_LENGTH",-
                       TYPE              =  "INTEGER",-
                       MAX_VALUE         =  65000,-
                       MIN_VALUE         =  0),-
                  LIST(NAME              =  "CONTROL_BITS",-
                       TYPE              =  "VECTOR",-
                       ELEMENT_TYPE      =  "INTEGER",-
                       MAX_LENGTH        =  5,-
                       MAX_ELEMENT_VALUE =  15,-
                       MIN_ELEMENT_VALUE =  0,-                       
                       CHANGE_CALLBACK   =  VECTOR("#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_CONTROL_SUPERVISION_TIMEOUT"")")),-
                  LIST(NAME              =  "QUALIFIERS",-
                       TYPE              =  "VECTOR",-
                       ELEMENT_TYPE      =  "INTEGER",-
                       MAX_LENGTH        =  5,-
                       MAX_ELEMENT_VALUE =  15,-
                       MIN_ELEMENT_VALUE =  0),-
                  LIST(NAME              =  "CONTROL_SUPERVISION_TIMEOUT",-
                       TYPE              =  "INTEGER",-
                       MAX_VALUE         =  65000,-
                       MIN_VALUE         =  0),-
                  LIST(NAME              =  "CONTROL_SUPERVISION_ALARM",-
                       TYPE              =  "SELECTOR",-
                       VALUES            =  (0,-
                                             1,-
                                             2,-
                                             3,-
                                             4,-
                                             5,-
                                             6,-
                                             7),-
                       REPRESENT         =  ("No Alarm",-
                                             "Alarm class 1",-
                                             "Alarm class 2",-
                                             "Alarm class 3",-
                                             "Alarm class 4",-
                                             "Alarm class 5",-
                                             "Alarm class 6",-
                                             "Alarm class 7")),-
                  LIST(NAME              =  "OUTPUT_STATUS",-
                       TYPE              =  "BOOLEAN"),-
                  LIST(NAME              =  "AUTHORIZATION_GROUP",-
                       TYPE              =  "EDITABLE_SELECTOR",-
                       INPUT_TYPE        =  "TEXT",-
                       VALUES            =  %AUTHORIZATION_GROUPS,-
                       REPRESENT         =  %AUTHORIZATION_GROUPS,-
                       MAX_LENGTH        =  63),-
                  LIST(NAME              =  "OPERATOR_PLACE_HANDLING",-
                       TYPE              =  "SELECTOR",-
                       VALUES            =  ("NONE",-
                                             "LOC",-
                                             "LOCSTA",-
                                             "LOC_AND_LOCSTA"),-
                       REPRESENT         =  ("None",-
                                             "Loc",-
                                             "LocSta",-
                                             "Loc and LocSta")),-
                  LIST(NAME              =  "BAY_LR_POLARITY",-
                       TYPE              =  "SELECTOR",-
                       VALUES            =  ("R1",-
                                             "L1"),-
                       REPRESENT         =  ("Local=0,Remote=1",-
                                             "Remote=0,Local=1")),-
                  LIST(NAME              =  "TAGOUT",-									;HoDa 7.5.2008 added for tagout
                       TYPE              =  "BOOLEAN",-
                       CHANGE_CALLBACK   =  VECTOR("#DO .ST_READ_DATA_FILE_SECTION(""CALLBACK_TAGOUT"")")),-
                  LIST(NAME              =  "AUXILIARY_PLUG",-
                       TYPE              =  "BOOLEAN"),-
                  LIST(NAME              =  "EVENT_RECORDING",-
                       TYPE              =  "BOOLEAN"),-
                  LIST(NAME              =  "ADD_CAUSE_IX",-
                       TYPE              =  "INTEGER")),-
      SCT_USER_PROGS = (-
                  "U_INTERLOCKING",-
                  "U_OTHER_OBJECTS"),-
      SCT_HELP_FILE = "SAGR_LANG/SAI_SSW.HLP",-
      REPR_ATTRIBUTES = -
                  LIST(NAME              =  "REPRESENTATION",-
                       VALUES            =  %REPR_LIST),-
      REPR_USER_PROGS = "")  

#BLOCK_END
                           
;add configurable attributes for object identifiers
#SET FUNC_DEF:VSCT_ATTRIBUTES = APPEND(%OBJECT_IDENTIFIERS, FUNC_DEF:VSCT_ATTRIBUTES)

@v_files = vector("")
@source_dir = fm_scil_directory("/SA_LIB/DEFAULTS/OBJECT_TYPES")
#if DIRECTORY_MANAGER("EXISTS", %source_dir) #then @v_files = append(%v_files, fm_represent(file_manager("LIST",%source_dir,"*.dat")))

@t_Apl = apl:bna
@source_dir = fm_scil_directory("/APL/'t_Apl'/APLMOD4/DEFAULTS/OBJECT_TYPES")
#if DIRECTORY_MANAGER("EXISTS", %source_dir) #then @v_files = append(%v_files, fm_represent(file_manager("LIST",%source_dir,"*.dat")))

@v_files = remove_duplicates(%v_files)

#CREATE L_ITEM_NAME:V = LIST(NAME  = "LIB_OBJECT_TYPE",-
                       TYPE      =  "SELECTOR",-
                       VALUES    =  %v_files,-
                       REPRESENT =  %v_files)

@I_START = LENGTH(%OBJECT_IDENTIFIERS)
#SET FUNC_DEF:VSCT_ATTRIBUTES = INSERT_ELEMENT(FUNC_DEF:VSCT_ATTRIBUTES, %I_START + 1, %L_ITEM_NAME)

;read object identification from database when SCT opens
@S = STATUS
#ERROR IGNORE
@PRODUCT_ID = .PRODUCT_ID
#ERROR CONTINUE
@S = STATUS
#IF %S == 0 #THEN #BLOCK
  #IF UPPER_CASE(.PRODUCT_ID) == "PF_CONF" #THEN #BLOCK
    #ERROR IGNORE
    @S = STATUS
    @DB_LN = 'ID'_PICTURE_FUNCTION_CONF:VP_OBJECT_LN
    @DB_IX = 'ID'_PICTURE_FUNCTION_CONF:VP_OBJECT_INDEXES(1)
    @DB_OI = 'DB_LN':POI'DB_IX'
    @OI_START_POS = 1
    #ERROR CONTINUE
    @S = STATUS
    #IF %S == 0 #THEN #BLOCK
      #LOOP_WITH I = 1..30
        #IF %I < %NR_OF_FIELDS #THEN #BLOCK  
          @TEXT_FROM_DB = EDIT(SUBSTR(%DB_OI,%OI_START_POS,%OI_LENGTH'I'-1),"TRIM")
          @CONF_VALUE = .ST_GET_ATTRIBUTE(%OBJECT_IDENTIFIER_'I'_NAME)
          #IF %TEXT_FROM_DB <> %CONF_VALUE #THEN .ST_SET_ATTRIBUTE(%OBJECT_IDENTIFIER_'I'_NAME,%TEXT_FROM_DB)
          @OI_START_POS = %OI_START_POS + %OI_LENGTH'I'
        #BLOCK_END
        #ELSE_IF %I == %NR_OF_FIELDS #THEN #BLOCK  
          @TEXT_FROM_DB = EDIT(SUBSTR(%DB_OI,%OI_START_POS,%OI_LENGTH'I'),"TRIM")
          @CONF_VALUE = .ST_GET_ATTRIBUTE(%OBJECT_IDENTIFIER_'I'_NAME)
          #IF %TEXT_FROM_DB <> %CONF_VALUE #THEN .ST_SET_ATTRIBUTE(%OBJECT_IDENTIFIER_'I'_NAME,%TEXT_FROM_DB)
          @OI_START_POS = %OI_START_POS + %OI_LENGTH'I'
        #BLOCK_END
        #ELSE #LOOP_EXIT
      #LOOP_END
    #BLOCK_END
  #BLOCK_END
#BLOCK_END

##FUNC_DEF_END

;-------- Callback programs -----------------

;callback switching device type
##CALLBACK_SWITCHING_DEVICE_TYPE_BEGIN
@B_PASTE_ON = ROOT.ST_IS_PASTING
@SWITCHING_DEVICE_TYPE = ROOT.ST_GET_ATTRIBUTE("SWITCHING_DEVICE_TYPE")
@STATION_TYPE = ROOT.ST_GET_ATTRIBUTE("STATION_TYPE")
#CASE %SWITCHING_DEVICE_TYPE
   #WHEN "QB","QS" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            #SET SWITCHING_DEVICE_PURPOSE_LIST1:VVALUE="01"
            #SET SWITCH_SECTION_LIST1:VVALUE=0
         #BLOCK_END
      #BLOCK_END
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCHING_DEVICE_PURPOSE",%SWITCHING_DEVICE_PURPOSE_LIST1)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCH_SECTION",%SWITCH_SECTION_LIST1)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",%CONTROL_TYPE_LIST1)
      ROOT.ST_DISABLE_ATTRIBUTE("SWITCH_SECTION")
      ROOT.ST_ENABLE_ATTRIBUTE("AUXILIARY_PLUG")
      #CASE .STANDARD_FUNCTION_NAME
         #WHEN "SAGR_INST/FPI_SSWI_S" @DEFAULT_REPR = "F_REPR/F_BREAK1"
         #WHEN "SAGR_INST/FPI_SSWI_M" @DEFAULT_REPR = "F_REPR/F_BREAKM1"
         #WHEN "SAGR_INST/FPI_SSWI_L" @DEFAULT_REPR = "F_REPR/F_BREAKL1"
      #CASE_END
   #BLOCK_END
   #WHEN "QI" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            #SET SWITCHING_DEVICE_PURPOSE_LIST1:VVALUE="01"
            #SET SWITCH_SECTION_LIST1:VVALUE=0
         #BLOCK_END
      #BLOCK_END
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCHING_DEVICE_PURPOSE",%SWITCHING_DEVICE_PURPOSE_LIST1)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCH_SECTION",%SWITCH_SECTION_LIST1)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",%CONTROL_TYPE_LIST1)
      ROOT.ST_DISABLE_ATTRIBUTE("SWITCH_SECTION")
      ROOT.ST_ENABLE_ATTRIBUTE("AUXILIARY_PLUG")
      #CASE .STANDARD_FUNCTION_NAME
         #WHEN "SAGR_INST/FPI_SSWI_S" @DEFAULT_REPR = "F_REPR/F_BREAK1"
         #WHEN "SAGR_INST/FPI_SSWI_M" @DEFAULT_REPR = "F_REPR/F_BREAKM1"
         #WHEN "SAGR_INST/FPI_SSWI_L" @DEFAULT_REPR = "F_REPR/F_BREAKL1"
      #CASE_END
   #BLOCK_END
   #WHEN "QD","QF","QL" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            #SET SWITCHING_DEVICE_PURPOSE_LIST2:VVALUE="01"
            #SET SWITCH_SECTION_LIST1:VVALUE=0
         #BLOCK_END
      #BLOCK_END
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCHING_DEVICE_PURPOSE",%SWITCHING_DEVICE_PURPOSE_LIST2)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCH_SECTION",%SWITCH_SECTION_LIST1)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",%CONTROL_TYPE_LIST1)
      ROOT.ST_DISABLE_ATTRIBUTE("SWITCH_SECTION")
      ROOT.ST_ENABLE_ATTRIBUTE("AUXILIARY_PLUG")
      #CASE .STANDARD_FUNCTION_NAME
         #WHEN "SAGR_INST/FPI_SSWI_S" @DEFAULT_REPR = "F_REPR/F_DISC1"
         #WHEN "SAGR_INST/FPI_SSWI_M" @DEFAULT_REPR = "F_REPR/F_DISCM1"
         #WHEN "SAGR_INST/FPI_SSWI_L" @DEFAULT_REPR = "F_REPR/F_DISCL1"
      #CASE_END
   #BLOCK_END
   #WHEN "QE" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            #SET SWITCHING_DEVICE_PURPOSE_LIST3:VVALUE="01"
            #SET SWITCH_SECTION_LIST1:VVALUE=0
         #BLOCK_END
      #BLOCK_END
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCHING_DEVICE_PURPOSE",%SWITCHING_DEVICE_PURPOSE_LIST3)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCH_SECTION",%SWITCH_SECTION_LIST1)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",%CONTROL_TYPE_LIST1)
      ROOT.ST_DISABLE_ATTRIBUTE("SWITCH_SECTION")
      ROOT.ST_ENABLE_ATTRIBUTE("AUXILIARY_PLUG")
      #CASE .STANDARD_FUNCTION_NAME
         #WHEN "SAGR_INST/FPI_SSWI_S" @DEFAULT_REPR = "F_REPR/F_DISC1"
         #WHEN "SAGR_INST/FPI_SSWI_M" @DEFAULT_REPR = "F_REPR/F_DISCM1"
         #WHEN "SAGR_INST/FPI_SSWI_L" @DEFAULT_REPR = "F_REPR/F_DISCL1"
      #CASE_END
   #BLOCK_END
   #WHEN "QM" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            #SET SWITCHING_DEVICE_PURPOSE_LIST4:VVALUE="01"
            #SET SWITCH_SECTION_LIST1:VVALUE=0
         #BLOCK_END
      #BLOCK_END
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCHING_DEVICE_PURPOSE",%SWITCHING_DEVICE_PURPOSE_LIST4)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCH_SECTION",%SWITCH_SECTION_LIST1)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",%CONTROL_TYPE_LIST1)
      ROOT.ST_DISABLE_ATTRIBUTE("SWITCH_SECTION")
      ROOT.ST_ENABLE_ATTRIBUTE("AUXILIARY_PLUG")
      #CASE .STANDARD_FUNCTION_NAME
         #WHEN "SAGR_INST/FPI_SSWI_S" @DEFAULT_REPR = "F_REPR/F_DISC1"
         #WHEN "SAGR_INST/FPI_SSWI_M" @DEFAULT_REPR = "F_REPR/F_DISCM1"
         #WHEN "SAGR_INST/FPI_SSWI_L" @DEFAULT_REPR = "F_REPR/F_DISCL1"
      #CASE_END
   #BLOCK_END
   #WHEN "QT" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            #SET SWITCHING_DEVICE_PURPOSE_LIST6:VVALUE="01"
            #SET SWITCH_SECTION_LIST3:VVALUE=1
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("AUXILIARY_PLUG",LIST(VALUE=FALSE))
         #BLOCK_END
      #BLOCK_END
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCHING_DEVICE_PURPOSE",%SWITCHING_DEVICE_PURPOSE_LIST6)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCH_SECTION",%SWITCH_SECTION_LIST3)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",%CONTROL_TYPE_LIST1)
      ROOT.ST_ENABLE_ATTRIBUTE("SWITCH_SECTION")
      ROOT.ST_DISABLE_ATTRIBUTE("AUXILIARY_PLUG")
      #CASE .STANDARD_FUNCTION_NAME
         #WHEN "SAGR_INST/FPI_SSWI_S" @DEFAULT_REPR = "F_REPR/F_TRUCK1"
         #WHEN "SAGR_INST/FPI_SSWI_M" @DEFAULT_REPR = "F_REPR/F_TRUCKM1"
         #WHEN "SAGR_INST/FPI_SSWI_L" @DEFAULT_REPR = "F_REPR/F_TRUCKL1"
      #CASE_END
   #BLOCK_END
   #WHEN "Q3" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            #SET SWITCHING_DEVICE_PURPOSE_LIST5:VVALUE="01"
            #SET SWITCH_SECTION_LIST2:VVALUE=1
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("AUXILIARY_PLUG",LIST(VALUE=FALSE))
         #BLOCK_END
      #BLOCK_END
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCHING_DEVICE_PURPOSE",%SWITCHING_DEVICE_PURPOSE_LIST5)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("SWITCH_SECTION",%SWITCH_SECTION_LIST2)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",%CONTROL_TYPE_LIST2)
      ROOT.ST_ENABLE_ATTRIBUTE("SWITCH_SECTION")
      ROOT.ST_DISABLE_ATTRIBUTE("AUXILIARY_PLUG")
      #CASE .STANDARD_FUNCTION_NAME
         #WHEN "SAGR_INST/FPI_SSWI_S" @DEFAULT_REPR = "F_REPR/F_DISC1"
         #WHEN "SAGR_INST/FPI_SSWI_M" @DEFAULT_REPR = "F_REPR/F_DISCM1"
         #WHEN "SAGR_INST/FPI_SSWI_L" @DEFAULT_REPR = "F_REPR/F_DISCL1"
      #CASE_END
   #BLOCK_END
#CASE_END
#IF NOT %INITIALIZATION #THEN #BLOCK
  #IF NOT %B_PASTE_ON #THEN #BLOCK
     ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_PULSE_LENGTH",LIST(VALUE=0))
     ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_BITS",LIST(VALUE=VECTOR()))
     .ST_SET_ATTRIBUTE("REPRESENTATION",%DEFAULT_REPR)
  #BLOCK_END
#BLOCK_END
#ELSE #BLOCK
   @REPRESENTATION = ROOT.ST_GET_ATTRIBUTE("REPRESENTATION")
   #IF %REPRESENTATION=="F_REPR/NO_REPR_S" OR %REPRESENTATION=="F_REPR/NO_REPR_M" OR %REPRESENTATION=="F_REPR/NO_REPR_L" #THEN .ST_SET_ATTRIBUTE("REPRESENTATION",%DEFAULT_REPR)
#BLOCK_END

##CALLBACK_SWITCHING_DEVICE_TYPE_END

;callback motorized
##CALLBACK_MOTORIZED_BEGIN
@B_PASTE_ON = ROOT.ST_IS_PASTING
@STATION_TYPE = ROOT.ST_GET_ATTRIBUTE("STATION_TYPE")
@MOTORIZED    = ROOT.ST_GET_ATTRIBUTE("MOTORIZED")
@CONTROL_TYPE = ROOT.ST_GET_ATTRIBUTE("CONTROL_TYPE")
@CONTROL_BITS = ROOT.ST_GET_ATTRIBUTE("CONTROL_BITS")
#IF NOT %INITIALIZATION #THEN #BLOCK
   ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_PULSE_LENGTH",LIST(VALUE=0))
   ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_BITS",LIST(VALUE=VECTOR()))
#BLOCK_END
#IF %MOTORIZED #THEN #BLOCK
   ROOT.ST_ENABLE_ATTRIBUTE("CONTROL_TYPE")
   #IF %CONTROL_TYPE=="SEC-2DO" #THEN ROOT.ST_ENABLE_ATTRIBUTE("CONTROL_PULSE_LENGTH")
   #ELSE ROOT.ST_DISABLE_ATTRIBUTE("CONTROL_PULSE_LENGTH")
   #IF %CONTROL_TYPE=="AO" #THEN ROOT.ST_ENABLE_ATTRIBUTE("CONTROL_BITS")
   #ELSE ROOT.ST_DISABLE_ATTRIBUTE("CONTROL_BITS")
#BLOCK_END
#ELSE #BLOCK
   ROOT.ST_DISABLE_ATTRIBUTE("CONTROL_TYPE")
   ROOT.ST_DISABLE_ATTRIBUTE("CONTROL_PULSE_LENGTH")
   ROOT.ST_DISABLE_ATTRIBUTE("CONTROL_BITS")
#BLOCK_END

##CALLBACK_MOTORIZED_END


;callback synchrocheck_bypass
##CALLBACK_SYNCHROCHECK_BYPASS_BEGIN
#IF DATA_TYPE(%'.ID'_PICTURE_FUNCTION_CONF.SYNCHRO_CHECK_BYPASS_ON_PROCEDURE)=="NONE" #THEN #BLOCK
   #MODIFY '.ID'_PICTURE_FUNCTION_CONF:V=LIST(SYNCHRO_CHECK_BYPASS_ON_PROCEDURE=VECTOR(""))
#BLOCK_END
#IF DATA_TYPE(%'.ID'_PICTURE_FUNCTION_CONF.SYNCHRO_CHECK_BYPASS_OFF_PROCEDURE)=="NONE" #THEN #BLOCK
   #MODIFY '.ID'_PICTURE_FUNCTION_CONF:V=LIST(SYNCHRO_CHECK_BYPASS_OFF_PROCEDURE=VECTOR(""))
#BLOCK_END
#IF DATA_TYPE(%'.ID'_PICTURE_FUNCTION_CONF.SYN_IND_IX)=="NONE" #THEN #BLOCK
   #MODIFY '.ID'_PICTURE_FUNCTION_CONF:V=LIST(SYN_IND_IX=22)
#BLOCK_END
#IF DATA_TYPE(%'.ID'_PICTURE_FUNCTION_CONF.SYN_CMD_IX)=="NONE" #THEN #BLOCK
   #MODIFY '.ID'_PICTURE_FUNCTION_CONF:V=LIST(SYN_CMD_IX=23)
#BLOCK_END

##CALLBACK_SYNCHROCHECK_BYPASS_END


;callback station type  
##CALLBACK_STATION_TYPE_BEGIN

@B_PASTE_ON = ROOT.ST_IS_PASTING
#DO .ST_READ_DATA_FILE_SECTION("CALLBACK_MOTORIZED")
#IF NOT %INITIALIZATION #THEN #BLOCK
   #IF %STATION_TYPE=="RTU" OR %STATION_TYPE=="RTU_E" #THEN #BLOCK
      #IF NOT %B_PASTE_ON #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("EVENT_RECORDING",LIST(VALUE=TRUE))
   #BLOCK_END
   #ELSE ROOT.ST_SET_ATTRIBUTE_DEFINITION("EVENT_RECORDING",LIST(VALUE=FALSE))
#BLOCK_END

#CASE %STATION_TYPE
   #WHEN "SPA" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="DB"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-4BO"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "ANSI" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="AI"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-4BO"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "LON" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="DB"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-4BO"))
            ROOT.ST_ENABLE_ATTRIBUTE("QUALIFIERS")
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "RTU" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="DB"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-BO"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "RTU_E" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="DB"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-BO"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "IEC101", "ICCP" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="DB"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-BO"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "IEC103" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="DB"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="DIR-BO"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "DNP_30" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("OUTPUT_STATUS",LIST(VALUE=FALSE))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="2BI"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-BO"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "MODBUS_RTU" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="AI"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-4BO"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="R1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #WHEN "IEC61850" #BLOCK
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("INDICATION_TYPE",LIST(VALUE="DB"))
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("CONTROL_TYPE",LIST(VALUE="SEC-5AO"))
            ROOT.ST_ENABLE_ATTRIBUTE("INTERLOCKING_BYPASS")
            ROOT.ST_ENABLE_ATTRIBUTE("SYNCHROCHECK_BYPASS")
            ROOT.ST_ENABLE_ATTRIBUTE("DEFINE_ITEM_NAME")
            ROOT.ST_SET_ATTRIBUTE_DEFINITION("BAY_LR_POLARITY",LIST(VALUE="L1"))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
#CASE_END

#IF %STATION_TYPE<>"LON" #THEN  ROOT.ST_DISABLE_ATTRIBUTE("QUALIFIERS")
#IF %STATION_TYPE<>"IEC61850" #THEN  ROOT.ST_SET_ATTRIBUTE_DEFINITION("ADD_CAUSE_IX",LIST(VALUE=0))

#IF %STATION_TYPE=="RTU" OR %STATION_TYPE=="RTU_E" OR %STATION_TYPE=="DNP_30" #THEN ROOT.ST_ENABLE_ATTRIBUTE("EVENT_RECORDING")
#ELSE ROOT.ST_DISABLE_ATTRIBUTE("EVENT_RECORDING")
#IF %STATION_TYPE=="DNP_30" #THEN ROOT.ST_ENABLE_ATTRIBUTE("OUTPUT_STATUS")
#ELSE ROOT.ST_DISABLE_ATTRIBUTE("OUTPUT_STATUS")

#IF %B_PASTE_ON #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST)

#IF ROOT.ST_GET_LIB_REVISION > " 2.3" #THEN #BLOCK
   #IF %STATION_TYPE=="DNP_30" #THEN #BLOCK 
      ROOT.ST_ENABLE_ATTRIBUTE("CMD_PARAMETER")
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST1)
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=4))
      #BLOCK_END
   #BLOCK_END
   #ELSE_IF %STATION_TYPE=="IEC101" OR %STATION_TYPE== "ICCP" #THEN #BLOCK
      ROOT.ST_ENABLE_ATTRIBUTE("CMD_PARAMETER")
      #IF %CONTROL_TYPE == "AO" #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST3)
      #ELSE ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST2)
      #IF NOT %INITIALIZATION #THEN #BLOCK
         #IF NOT %B_PASTE_ON #THEN #BLOCK
            #IF %CONTROL_TYPE <> "AO" #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=46))
            #ELSE ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=48))
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
   #ELSE_IF %STATION_TYPE=="LON" #THEN #BLOCK 
      #IF %CONTROL_TYPE == "SEC-BO" #THEN #BLOCK
         ROOT.ST_ENABLE_ATTRIBUTE("CMD_PARAMETER")
         ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST2)
         #IF NOT %INITIALIZATION #THEN #BLOCK
            #IF NOT %B_PASTE_ON #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=46))
         #BLOCK_END
      #BLOCK_END
      #ELSE #BLOCK
         ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST)
         ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=4))
         ROOT.ST_DISABLE_ATTRIBUTE("CMD_PARAMETER")
      #BLOCK_END
   #BLOCK_END
   #ELSE #BLOCK
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST)
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=4))
      ROOT.ST_DISABLE_ATTRIBUTE("CMD_PARAMETER")
   #BLOCK_END 
   #IF %STATION_TYPE <> "DNP_30" #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("OUTPUT_STATUS",LIST(VALUE=FALSE))
#BLOCK_END

#IF %STATION_TYPE <> "IEC61850" #THEN #BLOCK
   ROOT.ST_DISABLE_ATTRIBUTE("DEFINE_ITEM_NAME")
   ROOT.ST_DISABLE_ATTRIBUTE("OPC_ITEM_PREFIX")
   ROOT.ST_DISABLE_ATTRIBUTE("OPC_LN_INSTANCES")
   ROOT.ST_SET_ATTRIBUTE_DEFINITION("OPC_ITEM_PREFIX",LIST(VALUE=""))
   ROOT.ST_SET_ATTRIBUTE_DEFINITION("OPC_LN_INSTANCES",LIST(VALUE=VECTOR()))   

   ROOT.ST_SET_ATTRIBUTE_DEFINITION("INTERLOCKING_BYPASS",LIST(VALUE=FALSE))
   ROOT.ST_SET_ATTRIBUTE_DEFINITION("SYNCHROCHECK_BYPASS",LIST(VALUE=FALSE))
   ROOT.ST_DISABLE_ATTRIBUTE("INTERLOCKING_BYPASS")
   ROOT.ST_DISABLE_ATTRIBUTE("SYNCHROCHECK_BYPASS")
   ROOT.ST_DISABLE_ATTRIBUTE("OPERATOR_PLACE_HANDLING")  
#BLOCK_END
#ELSE #BLOCK
 ROOT.ST_ENABLE_ATTRIBUTE("OPERATOR_PLACE_HANDLING")
 #IF ROOT.ST_GET_ATTRIBUTE("DEFINE_ITEM_NAME") #THEN #BLOCK
      ROOT.ST_ENABLE_ATTRIBUTE("OPC_ITEM_PREFIX")
      ROOT.ST_ENABLE_ATTRIBUTE("OPC_LN_INSTANCES")
   #BLOCK_END
   #ELSE #BLOCK
      ROOT.ST_DISABLE_ATTRIBUTE("OPC_ITEM_PREFIX")
      ROOT.ST_DISABLE_ATTRIBUTE("OPC_LN_INSTANCES")
   #BLOCK_END
   #IF NOT %INITIALIZATION #THEN #BLOCK
      ROOT.ST_SET_ATTRIBUTE_DEFINITION("ADD_CAUSE_IX",LIST(VALUE=55))
   #BLOCK_END
#BLOCK_END

##CALLBACK_STATION_TYPE_END

##CALLBACK_DEFINE_ITEM_NAME_BEGIN
   #IF ROOT.ST_GET_ATTRIBUTE("DEFINE_ITEM_NAME") #THEN #BLOCK
      ROOT.ST_ENABLE_ATTRIBUTE("OPC_ITEM_PREFIX")
      ROOT.ST_ENABLE_ATTRIBUTE("OPC_LN_INSTANCES")
      #IF ROOT.ST_GET_ATTRIBUTE("OPC_ITEM_PREFIX") == "" #THEN  ROOT.ST_SET_ATTRIBUTE_DEFINITION("OPC_ITEM_PREFIX",LIST(VALUE="IEC61850 Subnetwork.IED1.LD1"))
      @v_tmp = ROOT.ST_GET_ATTRIBUTE("OPC_LN_INSTANCES")
      @v_LNs = ("CSWI1","CILO1")
      #IF ROOT.ST_GET_ATTRIBUTE("SWITCHING_DEVICE_TYPE") == "QS" #THEN @v_LNs = APPEND(%v_LNs,("RSYN1"))
      #IF LENGTH(%v_tmp) == 0 #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("OPC_LN_INSTANCES",LIST(VALUE=%v_LNs))
      #ELSE_IF %v_tmp(1) == "" #THEN ROOT.ST_SET_ATTRIBUTE_DEFINITION("OPC_LN_INSTANCES",LIST(VALUE=%v_LNs))
   #BLOCK_END
   #ELSE #BLOCK
      ROOT.ST_DISABLE_ATTRIBUTE("OPC_ITEM_PREFIX")
      ROOT.ST_DISABLE_ATTRIBUTE("OPC_LN_INSTANCES")
   #BLOCK_END
##CALLBACK_DEFINE_ITEM_NAME_END

##CALLBACK_CONTROL_TYPE_BEGIN
   #IF NOT %INITIALIZATION #THEN #BLOCK
      #IF NOT %B_PASTE_ON #THEN #BLOCK
         #IF %STATION_TYPE=="IEC101" OR %STATION_TYPE == "ICCP" #THEN #BLOCK
            #IF %CONTROL_TYPE == "AO" #THEN #BLOCK
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST3)
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=48))
            #BLOCK_END
            #ELSE #BLOCK
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST2)
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=46))
            #BLOCK_END
         #BLOCK_END
         #ELSE_IF %STATION_TYPE=="DNP_30" #THEN #BLOCK
            #IF %CONTROL_TYPE == "SEC-BO" #THEN #BLOCK
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=4))
            #BLOCK_END
            #ELSE #BLOCK
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=5))
            #BLOCK_END
         #BLOCK_END
         #ELSE_IF %STATION_TYPE=="LON" #THEN #BLOCK
            #IF %CONTROL_TYPE == "SEC-BO" #THEN #BLOCK
               ROOT.ST_ENABLE_ATTRIBUTE("CMD_PARAMETER")
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST2)
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=46))
            #BLOCK_END
            #ELSE #BLOCK
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",%CMD_PARAMETER_LIST)
               ROOT.ST_SET_ATTRIBUTE_DEFINITION("CMD_PARAMETER",LIST(VALUE=4))
               ROOT.ST_DISABLE_ATTRIBUTE("CMD_PARAMETER")
            #BLOCK_END
         #BLOCK_END
      #BLOCK_END
   #BLOCK_END
##CALLBACK_CONTROL_TYPE_END


;callback tagout
##CALLBACK_TAGOUT_BEGIN
   #IF ROOT.ST_GET_LIB_REVISION > " 2.3" #THEN #BLOCK
      #if %INITIALIZATION #then #block
      #if application_object_exists(0,"C","SAGR_TAGOUT") #then ROOT.ST_ENABLE_ATTRIBUTE("TAGOUT")
      #else ROOT.ST_DISABLE_ATTRIBUTE("TAGOUT")
      #block_end
   #BLOCK_END
##CALLBACK_TAGOUT_END

;callback control supervision timeout
##CALLBACK_CONTROL_SUPERVISION_TIMEOUT_BEGIN

@T_LN = 'ID'_PICTURE_FUNCTION_CONF:VP_OBJECT_LN 
@L_CC = LIST()
@V_INDEXES = VECTOR
@CONTROL_SUPERVISION_TIMEOUT = ROOT.ST_GET_ATTRIBUTE("CONTROL_SUPERVISION_TIMEOUT")
#IF %CONTROL_SUPERVISION_TIMEOUT > 0 #THEN #BLOCK
   @I_AD = 'ID'_PICTURE_FUNCTION_CONF:VCONTROL_SUPERVISION_TIMEOUT
   @CONTROL_TYPE = ROOT.ST_GET_ATTRIBUTE("CONTROL_TYPE")
   #CASE %CONTROL_TYPE  
      #WHEN "SEC-5AO", "SEC-5BO" #BLOCK
         @L_CC = LIST(AD = %I_AD, II = 10, XO = 13, XC = 14)
         @V_INDEXES = (10, 13, 14)
      #BLOCK_END
      #WHEN "SEC-4BO"  #BLOCK
         @L_CC = LIST(AD = %I_AD, II = 10, XI = 13, SO = 11, SC = 12)
         @V_INDEXES = (10, 11, 12, 13)
      #BLOCK_END
      #WHEN "SEC-2BO", "SEC-2DO" #BLOCK
         @L_CC = LIST(AD = %I_AD, II = 10, XO = 11, XC = 12)
         @V_INDEXES = (10, 11, 12)
      #BLOCK_END
      #WHEN "SEC-BO" #BLOCK
         @L_CC = LIST(AD = %I_AD, II = 10, XI = 13, VO = 0, VC = 1)
         @V_INDEXES = (10, 13)
      #BLOCK_END
      #WHEN "DIR-BO" #BLOCK
         @L_CC = LIST(AD = %I_AD, II = 10, XI = 13, VO = 0, VC = 1)
         @V_INDEXES = (10, 13)
      #BLOCK_END
      #WHEN "AO" #BLOCK
         @V_INDEXES = (10, 13)
         @CONTROL_BITS = 'ID'_PICTURE_FUNCTION_CONF:VCONTROL_BITS
         #IF LENGTH(%CONTROL_BITS) == 4 #THEN -
            @L_CC = LIST(AD = %I_AD, II = 10, XI = 13, VO = 2**%CONTROL_BITS(1), VC = 2**%CONTROL_BITS(2), VX = 2**%CONTROL_BITS(3))
         #ELSE_IF LENGTH(%CONTROL_BITS) == 2 #THEN -
            @L_CC = LIST(AD = %I_AD, II = 10, XI = 13, VO = 2**%CONTROL_BITS(1), VC = 2**%CONTROL_BITS(2))
         #ELSE @L_CC = LIST(AD = %I_AD, II = 10, XI = 13, VO = 0, VC = 1)
      #BLOCK_END
   #CASE_END
   @L_CC = MERGE_ATTRIBUTES(%L_CC, LIST(MT = "SAGR_CTRL_SUPERVISION", RC = 1, AC = 'ID'_PICTURE_FUNCTION_CONF:VCONTROL_SUPERVISION_ALARM))
   #LOOP_WITH I = 1 .. LENGTH(%V_INDEXES)
      @ALL_EXISTS = APPLICATION_OBJECT_EXISTS(0, "IX", LIST(LN = %T_LN, IX = %V_INDEXES(%I)))
      #IF NOT %ALL_EXISTS #THEN #LOOP_EXIT
   #LOOP_END
   #IF %ALL_EXISTS #THEN #SET 'T_LN':PCC = %L_CC
#BLOCK_END
#ELSE #BLOCK
   #IF APPLICATION_OBJECT_EXISTS(0, "P", %T_LN) #THEN -
      #SET 'T_LN':PCC = %L_CC
#BLOCK_END

##CALLBACK_CONTROL_SUPERVISION_TIMEOUT_END

;-------- SCT Initialization -----------------
##SCT_INIT_BEGIN
;execute callbacks once to initialize SCT
@INITIALIZATION = TRUE
#DO .ST_READ_DATA_FILE_SECTION("CALLBACK_SWITCHING_DEVICE_TYPE")
#DO .ST_READ_DATA_FILE_SECTION("CALLBACK_STATION_TYPE")
#DO .ST_READ_DATA_FILE_SECTION("CALLBACK_TAGOUT")                          ;HoDa 16.11.2008, added to check if sagr_tagout:c exist, if not we consider tagout not used
@INITIALIZATION = FALSE
##SCT_INIT_END

;-------- Define Configuration Tool Menu -----------------
##MENU_TXT_BEGIN

.ENABLE_POT
.ENABLE_REPRESENTATION_TOOL

##MENU_TXT_END

##MENU_PROG_BEGIN

##MENU_PROG_END

;-------- Define Process Objects -----------------
##P_OBJECTS_BEGIN

   #DO READ_TEXT("SAGR_INST/SAI_SSW.POT",1,10000)

##P_OBJECTS_END

;-------- Program Executed when OK -----------------
##OK_BEGIN

;save the object identifier (OI-attribute) for the future use
#LOOP_WITH I = 1 .. %NR_OF_FIELDS
  @SECTION    = %OBJECT_IDENTIFIER_'I'_NAME
  @CONF_VALUE = .ST_GET_ATTRIBUTE(%SECTION)

  ;if field not empty
  #IF %CONF_VALUE<>"" #THEN #BLOCK
    ;check if identifier already exists
    @NEW_IDENTIFIER=TRUE
    #LOOP_WITH J = 1 .. 10
      @KEY          = "'SECTION''J'"
      @KEY_VALUE'J' = READ_PARAMETER("PICT/OBJ_IDEN.INI",%SECTION,%KEY)
      @KEY_VALUE    = %KEY_VALUE'J'
      #IF KEY_VALUE:VSTATUS == 0 #THEN #BLOCK
        #IF KEY_VALUE:VVALUE == %CONF_VALUE #THEN @NEW_IDENTIFIER=FALSE
      #BLOCK_END
    #LOOP_END

    ;replace the last identifier with a new one
    #IF %NEW_IDENTIFIER #THEN #BLOCK
      #LOOP_WITH J = 1 .. 9
        @CNTR1 = 10 - %J
        @CNTR2 = %CNTR1 + 1
        @KEY_OLD = "'SECTION''CNTR1'"
        @KEY_NEW = "'SECTION''CNTR2'"
        @KEY_VALUE'CNTR1' = READ_PARAMETER("PICT/OBJ_IDEN.INI",%SECTION,%KEY_OLD)
        @KEY_PREV = %KEY_VALUE'CNTR1'
        #IF KEY_PREV:VSTATUS == 0 #THEN #BLOCK
          @KEY_OLD_VALUE = KEY_PREV:VVALUE
          @NEW = WRITE_PARAMETER("PICT/OBJ_IDEN.INI",%SECTION,%KEY_NEW,%KEY_OLD_VALUE)
          @OLD = DELETE_PARAMETER("PICT/OBJ_IDEN.INI",%SECTION,%KEY_OLD)
        #BLOCK_END
      #LOOP_END
      @FIRST_KEY = "'SECTION'"+"1"
      @KEY'I' = WRITE_PARAMETER("PICT/OBJ_IDEN.INI",%SECTION,%FIRST_KEY,%CONF_VALUE)
    #BLOCK_END
  #BLOCK_END
#LOOP_END

#IF 'ID'_PICTURE_FUNCTION_CONF:VLIB_OBJECT_TYPE <> "" #THEN #BLOCK
   @t_OT = 'ID'_PICTURE_FUNCTION_CONF:VLIB_OBJECT_TYPE
   #if length(path("SAGR_OT")) == 0 #then #block
      @source_dir = fm_scil_directory("/SA_LIB/DEFAULTS/OBJECT_TYPES")
      #if DIRECTORY_MANAGER("EXISTS", %source_dir) #then #block
         #PATH SAGR_OBJT  +NO_CREATE, /SA_LIB/DEFAULTS/OBJECT_TYPES
      #block_end
   
      @t_Apl = apl:bna
      @source_dir = fm_scil_directory("/APL/'t_Apl'/APLMOD4/DEFAULTS/OBJECT_TYPES")
      #if DIRECTORY_MANAGER("EXISTS", %source_dir) #then #block
         #PATH SAGR_OBJT  +NO_CREATE, /APL/'T_APL'/APLMOD4/DEFAULTS/OBJECT_TYPES
      #block_end
   #block_end
   @s = status
   #error ignore
   @l_OT_Attributes = evaluate(read_text("SAGR_OBJT/'t_OT'"))
   #if (status == 0) #then #block
      #if data_type(l_OT_Attributes:vSA_LIB_INDEXES) <> "NONE" #then #block
        #set 'ID'_PICTURE_FUNCTION_CONF:VSA_LIB_INDEXES = l_OT_Attributes:vSA_LIB_INDEXES
      #block_end
      #if data_type(l_OT_Attributes:vSYN_IND_IX) <> "NONE" #then #block
        #set 'ID'_PICTURE_FUNCTION_CONF:VSYN_IND_IX = l_OT_Attributes:vSYN_IND_IX
      #block_end
   #block_end
#BLOCK_END

#DO .ST_READ_DATA_FILE_SECTION("CALLBACK_CONTROL_SUPERVISION_TIMEOUT")

##OK_END
;-------- Program Executed when CANCEL -----------------
##CANCEL_BEGIN
 
 
 
##CANCEL_END

;-------- Program Executed when DELETE -----------------
##DELETE_BEGIN



##DELETE_END

