; LOOP PROCEDURE PACKAGE PART 2
;
; REVISION HISTORY
;   21.10.94   LOOP_CTRL:C : LOOPDIRUPD:E1 ACTIVATION AFTER AUTOREC PROC. CALL
;              LOOP_MANR1:C,LOOPAUTR1:C    ADDED LOOPTEST WRITE FOR MONITORING
;   25.10.94   LOOP_TERMS:C  IGNORE ACTIVATION IF AI <> NEWEST VALUE
;   02.12.94   LOOP_CONST:C
;                  MODEM DELAY CONSTANTS FOR RECONF ADDED
;                  LPTIMEOUT DEFAULT 7500 MS
                   FIRST_LOOP_RTU AND LAST_LOOP_RTU ADDED
;              LOOP_CTRL:C
;                  :E ACTIVATIONS SEPARATE FOR EACH LOOP
;                  NETS RUNNING CASE CHANGED
;              LOOPTSTNET:C CHANGED
;              LOOPRTUINI:C ADDED
;              LOOPMANR1 AND LOOPAUTR1 DELAYS USING PARAMETERS

LOOP_CONST:C

; LOOP_CONST:C - CONSTANT VALUE SETTINGS
; ---------------------------------------

; USER CHANGEABLE CONSTANTS
@LOOPMAX = 10        ; MAX NR OF LOOPS
@FORCESTART = "YES"  ; LOOP RESTART BE FORCED IF ONLY ONE NET IS RUNNING
@LPTIMEOUT = 7500    ; NET COMMUNICATION TIMEOUT
@MANPAUSE1 = 4       ; SECONDS : PAUSE FOR MODEM CONN BREAK IN MAN RECONF
@MANPAUSE2 = 7       ; SECONDS : PAUSE BEFORE BUILDUP IN MAN RECONF
@AUTOPAUSE1 = 4      ; SECONDS : PAUSE FOR MODEM CONN BREAK IN AUTO RECONF
@AUTOPAUSE2 = 7      ; SECONDS : PAUSE BEFORE BUILDUP IN AUTO RECONF

; END USER CHANGEABLE CONSTANTS

@RTUMAX = 16         ; POSITIONS IN LOOP PICTURE AND DATALOGS
@FIRST_LOOP_RTU = 1  ; LOWEST STA NR IN ANY LOOP
@LAST_LOOP_RTU = 1   ; HIGHEST STA NR IN ANY LOOP

; STATES
@INITIAL    = 1
@WAITBLDUP  = 2
@IDLE       = 3
@BREAKDOWN  = 4

; SIGNALS
@INIT       = 0
@NEWCONFIG  = 1
@TIMEOUT    = 2
@SUSPENSION = 3
@CONFIG_OK  = 4
@CONFIGFAIL = 5
@REDSWITCH  = 6

; ALARMS
@NO_ALARM   = 0
@UNDEF_SUSP = 112
@SUSP_NAUTO = 2
@AUTO_FAILD = 3

; OTHERS
@FALSE_VAL  = 0
@TRUE_VAL   = 1

@RTUOK      = 0
@RTUSUSPEND = 12602
@NOCTS1     = 16041
@NOCTS2     = 16002
@RECONF_OK  = 16812
@RECONFAIL  = 16813

@OK_CHANGE  = 0
@FAILED     = 1
@NO_CHANGE  = 2

@OVERLIMIT  = 5
@OK_VALUE   = 3

@A_SIDE     = 0
@B_SIDE     = 1
@UNDEF_SIDE = 2

@CLOSED = 0
@OPEN   = 1

@RTU_SMO = "RTU"   ; NAME OF RTU SYSTEM MSG OBJECT
                   ; NOTE: RTU2:P1 - SYSTEM MSG OBJECT OF RTU 2
@NETN = "NET"
@LINN = "LIN"  ; 'NETN''X'_'LINN':P'Y' = NAME OF SYSTEM MSG OBJECT
                ; OF LINE Y IN NET X
END


LOOP_CTRL1:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL1:C

LOOP_CTRL2:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL2:C

LOOP_CTRL3:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL3:C

LOOP_CTRL4:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL4:C

LOOP_CTRL5:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL5:C

LOOP_CTRL6:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL6:C

LOOP_CTRL7:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL7:C

LOOP_CTRL8:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL8:C

LOOP_CTRL9:C
 ; LOOP CONTROL SCHEDULER STARTING PROCEDURE FOR USING PARALLEL QUEUES
  #DO LOOP_CTRL:C
END LOOP_CTRL9:C


; REVISION HISTORY
; 08-11-1994 
; 03-10-1994 BU=0 REMOVED AT BUILD_UP TIMEOUT, LOOPAUTR1 AND LOOPMANR1 ADDED
;
LOOP_CTRL:C

; *****************************************
; LOOP CONTROL SCHEDULER                  *
;  INPUT PARAMETERS : LOOPNUMB, SIGNAL    *
; *****************************************
#DO LOOP_CONST:C

@A = TIMEOUT (%LPTIMEOUT)
@A_NET = TRUNC(LOOP_ANET:DOV'LOOPNUMB')
@A_LIN = TRUNC(LOOP_ALIN:DOV'LOOPNUMB')
@B_NET = TRUNC(LOOP_BNET:DOV'LOOPNUMB')
@B_LIN = TRUNC(LOOP_BLIN:DOV'LOOPNUMB')

; TEST IF BOTH NETS ALIVE. IF NOT, STOP HERE
#ERROR CONTINUE
#DO LOOPTSTNET:C
#CASE %RUNNING
   #WHEN "BOTH" #BLOCK
      #IF %LOOP_USED=="FALSE" #THEN #BLOCK
        #SET NET'A_NET':SLU'A_LIN' = 1
        #SET NET'A_NET':SDR'A_LIN' = "A"
        #SET NET'B_NET':SLU'B_LIN' = 1
        #SET NET'B_NET':SDR'B_LIN' = "B"
      #BLOCK_END
   #BLOCK_END
   #WHEN "A","B" #BLOCK
      #IF %LOOP_USED=="FALSE" #THEN #BLOCK
        #IF %RUNNING == "A" #THEN #BLOCK
           #SET NET'A_NET':SLU'A_LIN' = 1
           #SET NET'A_NET':SDR'A_LIN' = "A"
        #BLOCK_END
        #ELSE #BLOCK
           #SET NET'B_NET':SLU'B_LIN' = 1
           #SET NET'B_NET':SDR'B_LIN' = "B"
        #BLOCK_END
      #BLOCK_END
      #IF %FORCESTART == "NO" #THEN #BLOCK
         @RESET_NET = TRUNC(LOOP_'RUNNING'NET:D'LOOPNUMB')
         @RESET_LIN = TRUNC(LOOP_'RUNNING'LIN:D'LOOPNUMB')
         #DO LOOP_RESET:C
         #ERROR STOP
         %LOOP-W-NETNOTRRESP  One Net of loop 'LOOPNUMB' is not responding
      #BLOCK_END
   #BLOCK_END
   #WHEN "NONE" #BLOCK
      #ERROR STOP
      %LOOP-W-NETNOTRRESP   No Net of a loop 'LOOPNUMB' is responding
   #BLOCK_END
#CASE_END
  
#SET LOOP_ALARM:DOV'LOOPNUMB' = %NO_ALARM


; INITIAL:
; --------
#IF LOOP_STAT:D'LOOPNUMB' == %INITIAL #THEN #BLOCK
; DIAGNOSTIC UPDATE ONLY
#SET LOOPTEST:P'LOOPNUMB' = 100*%LOOPNUMB + 10*LOOP_STAT:D'LOOPNUMB'+%SIGNAL
   #IF (%SIGNAL == %NEWCONFIG) OR (%SIGNAL == %INIT) OR -
       (%SIGNAL == %REDSWITCH) #THEN #BLOCK
;     MANUAL  RECONFIGURATION
      #CASE %RUNNING 
         #WHEN "BOTH"  #DO LOOPMANREC:C
         #WHEN "A","B" #BLOCK
            #DO LOOPMANR1:C
         #BLOCK_END
      #CASE_END
      #EXEC LOOPDIRUPD:E'LOOPNUMB'
      #EXEC LOOPLOCUPD:E'LOOPNUMB'
      #EXEC LOOPSUPUPD:E'LOOPNUMB'
;     START TIMER: CONFIGURATION TIME
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
      #SET LOOP_TIMER:PAD'LOOPNUMB' = TRUNC(LOOP_CTIM:DOV'LOOPNUMB')
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OVERLIMIT

      #SET LOOP_STAT:D'LOOPNUMB' = %WAITBLDUP
   #BLOCK_END
#BLOCK_END

; BUILD-UP:
; ---------
#ELSE_IF LOOP_STAT:D'LOOPNUMB' == %WAITBLDUP #THEN #BLOCK
; DIAGNOSTIC UPDATE ONLY
#SET LOOPTEST:P'LOOPNUMB' = 100*%LOOPNUMB + 10*LOOP_STAT:D'LOOPNUMB'+%SIGNAL
   #IF (%SIGNAL == %REDSWITCH) #THEN #BLOCK
;     STOP ANY BREAKDOWN OR BUILDUP
      @ANETLS = 9
      @ANETLS = NET'A_NET':SLS'A_LIN' 
      #CASE %ANETLS
         #WHEN    1    #SET NET'A_NET':SBO'A_LIN' = 0
         #WHEN    2    #SET NET'A_NET':SBU'A_LIN' = 0
      #CASE_END
      @BNETLS = NET'B_NET':SLS'B_LIN' 
      #CASE %BNETLS
         #WHEN    1    #SET NET'B_NET':SBO'B_LIN' = 0
         #WHEN    2    #SET NET'B_NET':SBU'B_LIN' = 0
      #CASE_END

;     START A NEW BUILD UP
      #CASE %RUNNING 
         #WHEN "BOTH"  #DO LOOPMANREC:C
         #WHEN "A","B" #BLOCK
            #DO LOOPMANR1:C
         #BLOCK_END
      #CASE_END
      #EXEC LOOPDIRUPD:E'LOOPNUMB'
;     START TIMER: CONFIGURATION TIME
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
      #SET LOOP_TIMER:PAD'LOOPNUMB' = TRUNC(LOOP_CTIM:DOV'LOOPNUMB')
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OVERLIMIT
      #SET LOOP_STAT:D'LOOPNUMB' = %WAITBLDUP
      #EXEC LOOPBUDONE:E'LOOPNUMB'
      #EXEC LOOPLOCUPD:E'LOOPNUMB'
      #EXEC LOOPSUPUPD:E'LOOPNUMB'
   #BLOCK_END
   #ELSE_IF (%SIGNAL == %TIMEOUT) #THEN #BLOCK
;     STOP TIMER
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
      #SET LOOP_AUTO:D'LOOPNUMB' = %FALSE_VAL
      #EXEC LOOPBUDONE:E'LOOPNUMB'
      #EXEC LOOPSUPUPD:E'LOOPNUMB'
      #SET LOOP_STAT:D'LOOPNUMB'=%IDLE
   #BLOCK_END                          
   #ELSE_IF (%SIGNAL == %CONFIGFAIL) #THEN #BLOCK
;     STOP TIMER
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
      #SET LOOP_AUTO:D'LOOPNUMB' = %FALSE_VAL
      #EXEC LOOPBUDONE:E'LOOPNUMB'
      #EXEC LOOPSUPUPD:E'LOOPNUMB'
      #SET LOOP_STAT:D'LOOPNUMB'=%IDLE
   #BLOCK_END                          
   #ELSE_IF %SIGNAL == %CONFIG_OK #THEN #BLOCK
;     STOP TIMER
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
      #SET LOOP_AUTO:D'LOOPNUMB' = %TRUE_VAL
      #EXEC LOOPBUDONE:E'LOOPNUMB'
      #EXEC LOOPSUPUPD:E'LOOPNUMB'
      #SET LOOP_STAT:D'LOOPNUMB'=%IDLE
   #BLOCK_END
#BLOCK_END

; IDLE:
; -----
#ELSE_IF LOOP_STAT:D'LOOPNUMB' == %IDLE #THEN #BLOCK
   #IF (%SIGNAL == %NEWCONFIG) OR (%SIGNAL == %INIT) OR -
       (%SIGNAL == %REDSWITCH) #THEN #BLOCK
; DIAGNOSTIC UPDATE ONLY
#SET LOOPTEST:P'LOOPNUMB' = 100*%LOOPNUMB + 10*LOOP_STAT:D'LOOPNUMB'+%SIGNAL
;     MANUAL RECONFIGURATION
      #CASE %RUNNING 
         #WHEN "BOTH"  #BLOCK
            #DO LOOPMANREC:C
            #EXEC LOOPDIRUPD:E'LOOPNUMB'
         #BLOCK_END
         #WHEN "A","B" #BLOCK
            #DO LOOPMANR1:C
            #EXEC LOOPDIRUPD:E'LOOPNUMB'
            #EXEC LOOPLOCUPD:E'LOOPNUMB'
            #EXEC LOOPSUPUPD:E'LOOPNUMB'
         #BLOCK_END
      #CASE_END
;     START TIMER: CONFIGURATION TIME
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
      #SET LOOP_TIMER:PAD'LOOPNUMB' = TRUNC(LOOP_CTIM:DOV'LOOPNUMB')
      #SET LOOP_TIMER:POV'LOOPNUMB' = %OVERLIMIT

      #SET LOOP_STAT:D'LOOPNUMB' = %WAITBLDUP
   #BLOCK_END

   #ELSE_IF %SIGNAL == %SUSPENSION #THEN #BLOCK
; DIAGNOSTIC UPDATE ONLY
   #IF LOOP_AUTO:D'LOOPNUMB'==1 #THEN #SET LOOPTEST:P'LOOPNUMB' -
      = 100*%LOOPNUMB + 10*LOOP_STAT:D'LOOPNUMB'+%SIGNAL
      #IF (LOOP_AUTO:D'LOOPNUMB' == %TRUE_VAL) AND -
          ('RTU_SMO''STANUM':P1 <> %RTUOK)  #THEN #BLOCK
;        FIND SIDE OF SUSPENDED STATION
         @SUSP_SIDE = %UNDEF_SIDE
         #LOOP_WITH J = 1 .. %RTUMAX                       
            #IF TRUNC(LOOP'LOOPNUMB'LNUM:DOV'J') == %STANUM #THEN #BLOCK
               @SUSP_SIDE = TRUNC(LOOP'LOOPNUMB'PDIR:DOV'J')
               #LOOP_EXIT
            #BLOCK_END
         #LOOP_END

;     START BREAK DOWN ON SUSPENDED SIDE
         #IF %SUSP_SIDE == %A_SIDE #THEN #SET NET'A_NET':SBO'A_LIN' = 1
         #ELSE_IF %SUSP_SIDE==%B_SIDE #THEN #SET NET'B_NET':SBO'B_LIN'=1
         #ELSE #BLOCK
            #SET LOOP_ALARM:DOV'LOOPNUMB' = %UNDEF_SUSP
            #EXEC LOOP_ALARM:E1
         #BLOCK_END

;     START TIMER: BREAKDOWN TIME
         #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
         #SET LOOP_TIMER:PAD'LOOPNUMB' = TRUNC(LOOP_BTIM:DOV'LOOPNUMB')
         #SET LOOP_TIMER:POV'LOOPNUMB' = %OVERLIMIT

         #SET LOOP_STAT:D'LOOPNUMB' = %BREAKDOWN
      #BLOCK_END
      #ELSE #BLOCK
         #SET LOOP_ALARM:DOV'LOOPNUMB' = %SUSP_NAUTO
         #EXEC LOOP_ALARM:E1
      #BLOCK_END
   #BLOCK_END
#BLOCK_END

; BREAKDOWN:
; ----------
#ELSE_IF LOOP_STAT:D'LOOPNUMB' == %BREAKDOWN #THEN #BLOCK
; DIAGNOSTIC UPDATE ONLY
#SET LOOPTEST:P'LOOPNUMB' = 100*%LOOPNUMB + 10*LOOP_STAT:D'LOOPNUMB'+%SIGNAL
   #IF %SIGNAL == %TIMEOUT #THEN #BLOCK

;     STOP BREAK DOWN
      #SET NET'A_NET':SBO'A_LIN' = 0
      #SET NET'B_NET':SBO'B_LIN' = 0

;     AUTOMATIC RECONFIGURATION
      @RESULT = %FAILED
      #CASE %RUNNING 
         #WHEN "BOTH"  #DO LOOPAUTREC:C
         #WHEN "A","B" #DO LOOPAUTR1:C
      #CASE_END
      #IF %RESULT == %OK_CHANGE #THEN #BLOCK
;        START TIMER: CONFIGURATION TIME
         #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
         #SET LOOP_TIMER:PAD'LOOPNUMB' = TRUNC (LOOP_CTIM:DOV'LOOPNUMB')
         #SET LOOP_TIMER:POV'LOOPNUMB' = %OVERLIMIT
         #SET LOOP_STAT:D'LOOPNUMB' = %WAITBLDUP
      #BLOCK_END
      #ELSE_IF %RESULT == %FAILED #THEN #BLOCK
;        STOP TIMER
         #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
         #SET LOOP_AUTO:D'LOOPNUMB' = %FALSE_VAL
         #SET LOOP_ALARM:DOV'LOOPNUMB' = %AUTO_FAILD
         #EXEC LOOP_ALARM:E1
         #SET LOOP_STAT:D'LOOPNUMB' = %IDLE
      #BLOCK_END
      #ELSE_IF %RESULT==%NO_CHANGE #THEN #BLOCK
;        STOP TIMER
         #SET LOOP_TIMER:POV'LOOPNUMB' = %OK_VALUE
         #SET LOOP_STAT:D'LOOPNUMB'=%IDLE
      #BLOCK_END
      #EXEC LOOPDIRUPD:E'LOOPNUMB'
      #EXEC LOOPLOCUPD:E'LOOPNUMB'
      #EXEC LOOPSUPUPD:E'LOOPNUMB'
   #BLOCK_END
   #ELSE_IF %SIGNAL == %SUSPENSION #THEN #BLOCK

;     FIND SIDE OF SUSPENDED STATION
      @SUSP_SIDE = %UNDEF_SIDE
      #LOOP_WITH J = 1 .. %RTUMAX                       
         #IF TRUNC(LOOP'LOOPNUMB'LNUM:DOV'J') == %STANUM #THEN #BLOCK
            @SUSP_SIDE = TRUNC(LOOP'LOOPNUMB'PDIR:DOV'J')
            #LOOP_EXIT
         #BLOCK_END
      #LOOP_END

;     START BREAK DOWN ON SUSPENDED SIDE IF NOT ALREADY STARTED
      #IF %SUSP_SIDE == %A_SIDE #THEN #SET NET'A_NET':SBO'A_LIN' = 1
      #ELSE_IF %SUSP_SIDE==%B_SIDE #THEN #SET NET'B_NET':SBO'B_LIN'=1
      #ELSE #BLOCK
         #SET LOOP_ALARM:DOV'LOOPNUMB' = %UNDEF_SUSP
         #EXEC LOOP_ALARM:E1
      #BLOCK_END
   #BLOCK_END
#BLOCK_END

END



LOOP_INIT:C

#DO LOOP_CONST:C

#SET LOOP_ANET:DLR = 10
#SET LOOP_ALIN:DLR = 10
#SET LOOP_BNET:DLR = 10
#SET LOOP_BLIN:DLR = 10
#SET LOOP_ANET:DOV1 = 1
#SET LOOP_ALIN:DOV1 = 1
#SET LOOP_BNET:DOV1 = 2
#SET LOOP_BLIN:DOV1 = 2

#SET LOOP_CTIM:DLR = 10
#SET LOOP_BTIM:DLR = 10
#SET LOOP_CTIM:DOV1 = 10
#SET LOOP_BTIM:DOV1 = 10

#SET LOOP_STAT:DLR = 10
#SET LOOP_STAT:DOV1 = %INITIAL

#SET LOOP_NUMS:DLR = 10
#SET LOOP_NUMS:DOV1 = 1

#SET LOOP_AUTO:DLR = 10
#SET LOOP_AUTO:DOV1 = 1

#SET LOOP_ALARM:DLR = 10
#SET LOOP_ALARM:DOV1 = 1

END



LOOP_SETUP:C

#DO LOOP_CONST:C

#CREATE V:V
#SET V:VLF=0
#SET V:VIU=1
#SET V:VHR=10
#CREATE LOOPCOUNT:D = %V
#SET LOOPCOUNT:DLR = 1

#CREATE LOOPSTATS:D = %V

#SET LOOPSTATS:DLR=%LOOPMAX

#LOOP_WITH I = 1..%LOOPMAX
  @STATMAX = %LOOPMAX-%I
  #SET LOOPSTATS:DOV'I'=%STATMAX
  #SET LOOPSTATS:DOS'I'= 0
#LOOP_END

END


LOOP_TERMS:C


; HANDLE_TERMINAL_STATUS_MESSAGE: LOOP_TERMS:C
; --------------------------------------------
#DO LOOP_CONST:C
#IF %AI == 'LN':PAI'IX' #THEN #BLOCK
  #IF (%AI==%RTUSUSPEND) OR (%AI==%NOCTS1) OR (%AI==%NOCTS2) #THEN #BLOCK
     @NUM = 'LN':PFI'IX'
     @STN = 'LN':POA - 8000
     #EXEC LOOP_CTRL'NUM':C (@LOOPNUMB=%NUM,@SIGNAL=%SUSPENSION,@STANUM=%STN)
  #BLOCK_END
#BLOCK_END

END


LOOP_RESET:C
 
; RESETTING A LOOP TO INITIAL STATE

#DO LOOP_CONST:C
#SET LOOP_STAT:D(%LOOPNUMB) = %INITIAL
#CASE NET'RESET_NET':SLS'RESET_LIN' 
   #WHEN    1    #SET NET'RESET_NET':SBO'RESET_LIN' = 0
   #WHEN    2    #SET NET'RESET_NET':SBU'RESET_LIN' = 0
#CASE_END

; #SET NET'RESET_NET':SIU'RESET_LIN' = 0
#PAUSE 4
; #SET NET'RESET_NET':SIU'RESET_LIN' = 1

END



LOOPTSTNET:C

;  FOR TESTING IF BOTH NETS ARE RESPONDING AND IF LINE IN LOOP MODE
; OUTPUT : RUNNING = "BOTH","A","B" OR "NONE" ; LOOP_USED

#ERROR IGNORE
@LOOP_USED="FALSE"
@STAT = STATUS
@A_LU = NET'A_NET':SLU'A_LIN'
@ASTATUS = STATUS
@STAT = STATUS
@B_LU = NET'B_NET':SLU'B_LIN'
@BSTATUS = STATUS
#ERROR CONTINUE
#IF %ASTATUS == 0 #THEN #BLOCK
   #IF %BSTATUS == 0 #THEN #BLOCK
      @RUNNING = "BOTH"
      #IF (%A_LU==1 AND %B_LU==1) #THEN @LOOP_USED="TRUE"
   #BLOCK_END
   #ELSE #BLOCK
      @RUNNING = "A"
      #IF %A_LU==1 #THEN @LOOP_USED="TRUE"
   #BLOCK_END
#BLOCK_END
#ELSE #BLOCK
   #IF %BSTATUS == 0 #THEN #BLOCK
      @RUNNING = "B"
      #IF %B_LU==1 #THEN @LOOP_USED="TRUE"
   #BLOCK_END
   #ELSE @RUNNING = "NONE"
#BLOCK_END
     
END

LOOPAUTR1:C
; LOOPAUTR1:C - AUTO RECONF WHEN ONLY ONE FRONTEND IS RUNNING
; INPUT PARAM 
;  RUNNING      = "A" OR "B"


#SET LOOPTEST:P'LOOPNUMB'=14 
#SET LOOPTEST:P'LOOPNUMB'=11 
@SENDCONF = 0
#CASE %RUNNING
   #WHEN "A" #BLOCK
;     CREATE A-SIDE CONFIGURATION VECTOR
      @INX = 1
      #LOOP_WITH I = 1 .. %RTUMAX
       #IF (LOOP'LOOPNUMB'IUSE:DOV'I' == 1) #THEN #BLOCK
         @SENDCONF = 1
         @ACONFIG(%INX) = TRUNC(LOOP'LOOPNUMB'LNUM:DOV'I')
         @ACONFIG(%INX+1) = 1
         #SET LOOP'LOOPNUMB'PDIR:DOV'I' = %A_SIDE
         #SET LOOP'LOOPNUMB'CLOS:DOV'I' = %CLOSED
         @LAST = %I
         @INX = %INX + 2
       #BLOCK_END
      #LOOP_END
      #SET LOOP'LOOPNUMB'CLOS:DOV'LAST' = %OPEN    
      @ONENET = %A_NET
      @ONELIN = %A_LIN
      @ONESIDE = "LOOP_ANET"
   #BLOCK_END

   #WHEN "B" #BLOCK
;     CREATE B-SIDE CONFIGURATION VECTOR
      @INX = 1
      #LOOP_WITH I = 1 .. %RTUMAX
       @B = %RTUMAX-%I+1
       #IF (LOOP'LOOPNUMB'IUSE:DOV'B' == 1) #THEN #BLOCK
         @SENDCONF = 1
         @ACONFIG(%INX) = TRUNC(LOOP'LOOPNUMB'LNUM:DOV'B')
         @ACONFIG(%INX+1) = 1
         #SET LOOP'LOOPNUMB'PDIR:DOV'B' = %B_SIDE
         #SET LOOP'LOOPNUMB'CLOS:DOV'B' = %CLOSED
         @LAST = %B
         @INX = %INX + 2
       #BLOCK_END
      #LOOP_END
      #SET LOOP'LOOPNUMB'CLOS:DOV'LAST' = %OPEN    
      @ONENET = %B_NET
      @ONELIN = %B_LIN
      @ONESIDE = "LOOP_BNET"
   #BLOCK_END
#CASE_END

#IF %SENDCONF == 1 #THEN #BLOCK
   ; STOP ANY BREAKDOWN OR BUILDUP
   @NETLS = 9
   @NETLS = NET'ONENET':SLS'ONELIN' 
   #CASE %NETLS
      #WHEN    1    #SET NET'ONENET':SBO'ONELIN' = 0
      #WHEN    2    #SET NET'ONENET':SBU'ONELIN' = 0
   #CASE_END
      
   ; SEND CONFIGURATION VECTOR
   #SET NET'ONENET':SCF'ONELIN' = %ACONFIG 
   
  ; UPDATE NODE NUMBER OF STA:B OBJECTS
   @LEN = LENGTH( %ACONFIG )
   @I = 1
   #LOOP ( %I < %LEN )
     #IF ( %ACONFIG(%I+1) > 0 ) #THEN #BLOCK
        @J = %ACONFIG(%I)
        #SET STA'J':BND = TRUNC('ONESIDE':DOV'LOOPNUMB')
     #BLOCK_END
     @I = %I + 2
   #LOOP_END
   
   #SET NET'ONENET':SIU'ONELIN' = 0
   #PAUSE %AUTOPAUSE1
   #SET NET'ONENET':SIU'ONELIN' = 1
   #PAUSE %AUTOPAUSE2
   #SET NET'ONENET':SMT'ONELIN' = TRUNC(LOOP_STIM:D(%LOOPNUMB))
   #SET NET'ONENET':SBU'ONELIN' = 1
   @RESULT = %OK_CHANGE

   ; REQUIRE ONLY ONE RESULT MESSAGE !?
   #SET LOOPREPCNT:DOV'LOOPNUMB' = 1

   #SET LOOPAUTDON:DOV'LOOPNUMB' = 1
#BLOCK_END

END


LOOPMANR1:C
; LOOPMANR1:C - MANUAL RECONFIGURATION WHEN ONLY ONE SIDE RUNS
; INPUT PARAM 
;  RUNNING      = "A" OR "B"

#SET LOOPTEST:P'LOOPNUMB'=14 
#SET LOOPTEST:P'LOOPNUMB'=13 
@OLDTI = TIMEOUT(%LPTIMEOUT)
#ERROR CONTINUE

@SENDCONF = 0
#CASE %RUNNING
   #WHEN "A" #BLOCK
;     CREATE A-SIDE CONFIGURATION VECTOR
      @INX = 1
      #LOOP_WITH I = 1 .. %RTUMAX
       #IF (LOOP'LOOPNUMB'IUSE:DOV'I' == 1) #THEN #BLOCK
         @SENDCONF = 1
         @ACONFIG(%INX) = TRUNC(LOOP'LOOPNUMB'LNUM:DOV'I')
         @ACONFIG(%INX+1) = 1
         #SET LOOP'LOOPNUMB'PDIR:DOV'I' = %A_SIDE
         #SET LOOP'LOOPNUMB'CLOS:DOV'I' = %CLOSED
         @LAST = %I
         @INX = %INX + 2
       #BLOCK_END
      #LOOP_END
      #SET LOOP'LOOPNUMB'CLOS:DOV'LAST' = %OPEN    
      @ONENET = %A_NET
      @ONELIN = %A_LIN
      @ONESIDE = "LOOP_ANET"
   #BLOCK_END

   #WHEN "B" #BLOCK
;     CREATE B-SIDE CONFIGURATION VECTOR
      @INX = 1
      #LOOP_WITH I = 1 .. %RTUMAX
       @B = %RTUMAX-%I+1
       #IF (LOOP'LOOPNUMB'IUSE:DOV'B' == 1) #THEN #BLOCK
         @SENDCONF = 1
         @ACONFIG(%INX) = TRUNC(LOOP'LOOPNUMB'LNUM:DOV'B')
         @ACONFIG(%INX+1) = 1
         #SET LOOP'LOOPNUMB'PDIR:DOV'B' = %B_SIDE
         #SET LOOP'LOOPNUMB'CLOS:DOV'B' = %CLOSED
         @LAST = %B
         @INX = %INX + 2
       #BLOCK_END
      #LOOP_END
      #SET LOOP'LOOPNUMB'CLOS:DOV'LAST' = %OPEN    
      @ONENET = %B_NET
      @ONELIN = %B_LIN
      @ONESIDE = "LOOP_BNET"
   #BLOCK_END
#CASE_END

#IF %SENDCONF == 1 #THEN #BLOCK

   ; STOP ANY BREAKDOWN OR BUILDUP
   @NETLS = 9
   @NETLS = NET'ONENET':SLS'ONELIN' 
   #CASE %NETLS
      #WHEN    1    #SET NET'ONENET':SBO'ONELIN' = 0
      #WHEN    2    #SET NET'ONENET':SBU'ONELIN' = 0
   #CASE_END
      
   ; SEND CONFIGURATION VECTOR
   #SET NET'ONENET':SCF'ONELIN' = %ACONFIG 
   #SET NET'ONENET':SIU'ONELIN' = 0
   
  ; UPDATE NODE NUMBER OF STA:B OBJECTS
   @LEN = LENGTH( %ACONFIG )
   @I = 1
   #LOOP ( %I < %LEN )
     #IF ( %ACONFIG(%I+1) > 0 ) #THEN #BLOCK
        @J = %ACONFIG(%I)
        #SET STA'J':BND = TRUNC('ONESIDE':DOV'LOOPNUMB')
     #BLOCK_END
     @I = %I + 2
   #LOOP_END

  #PAUSE %MANPAUSE1
  #SET NET'ONENET':SIU'ONELIN' = 1
  #SET NET'ONENET':SMT'ONELIN' = TRUNC(LOOP_STIM:D(%LOOPNUMB))
  #PAUSE %MANPAUSE2
  #SET NET'ONENET':SBU'ONELIN' = 1

  ; REQUIRE ONLY ONE RESULT MESSAGE 
  #SET LOOPREPCNT:DOV'LOOPNUMB' = 1

#BLOCK_END

END

LOOPRTUINI:C

#LOOP_WITH RTU_NR=%FIRST_LOOP_RTU .. %LAST_LOOP_RTU
   #IF RTU'RTU_NR':POS<>0 #THEN #SET STA'RTU_NR':SOS=1
#LOOP_END

END
